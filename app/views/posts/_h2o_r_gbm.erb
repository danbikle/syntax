<code class='bash'>
I start this demo by referring to this page:

http://docs.h2o.ai/Ruser/rtutorial.html

I tried walking through the gbm section.

First I made note of the h2o version:

> 
> 
> h2o.clusterInfo(localH2O)
R is connected to H2O cluster:
    H2O cluster uptime:         17 hours 51 minutes 
    H2O cluster version:        2.9.0.1689 
    H2O cluster name:           H2O_started_from_R 
    H2O cluster total nodes:    1 
    H2O cluster total memory:   1.54 GB 
    H2O cluster total cores:    4 
    H2O cluster allowed cores:  2 
    H2O cluster healthy:        TRUE 
> 
> 

The above version was posted to the web on or about 2015-02-06.

Next I tried their system.file() call.

They dont explain what it does but I figured it out by studying the result:

> 
> 
> ausPath = system.file("extdata", "australia.csv", package="h2o")
> 
> 


> 
> ausPath
[1] "/home/dan/rdir/lib/R/library/h2o/extdata/australia.csv"
> 
> 

It is creating a simple string from the location of a CSV file called:

australia.csv

I'm not sure where the file came from but obviously the author of the 
R tutorial was confident that the CSV file is now on my laptop.

He/She can do this because the file is part of my R installation.

Next I feed that to h2o.importFile() which is a call I often see in h2o-R scripts:

> 
> australia.hex = h2o.importFile(localH2O, path = ausPath)
  |======================================================================| 100%
> 
> 


Next they setup for a call to h2o.gbm().
This call will look at some rows and columns in the CSV, learn from them, and then
create an h2o object called a model.

They allow me to refer to model using a variable which they hand me.

They dont call it a variable; they call it a key.

The h2o.gbm() signature can be summarized as this:

h2o.gbm(y = a_column_name, x = list_of_column_names, data = australia.hex, otherpairs)

In the tutorial, other pairs is this:

n.trees = 10, interaction.depth = 3, n.minobsinnode = 2, shrinkage = 0.2, distribution= "gaussian"

I like the design of the above signature.

I have seen a design in other ML technology which has a shorter signature:

other_ml_gbm(yvector, x_vectors, otherpairs)

The signature looks better but gives higher probability of bugs.

other_ml_gbm() is not telling me that the elements of yvector need to be aligned with row-vectors in x_vectors.

h2o.gbm() does it the right way.

It is telling me that my x-values and y-values should live next to each other in an object named australia.hex; they should be aligned.

But wait, there is more.

h2o.gbm() gives me the option of picking a subset of columns from australia.hex as my x-values.

The columns which do not get named might be useful for certain tasks.

The most common example I can think of is to have a timestamp column.

A timestamp column allows me to sort australia.hex by date which is extremely valuable for 
dealing with time-series data.

The timestamp column would be useful for sorting but it is not a feature I want to pass to h2o.gbm().
The design of the h2o.gbm() API allows me to do that. Yay!


Moving along in this discussion, I list below a screen dump of me calling h2o.gbm():

> 
> 
> list_of_column_names = c("premax", "salmax","minairtemp", "maxairtemp","maxsst", "maxsoilmoist", "Max_czcs")
> 
> 
> list_of_column_names
[1] "premax"       "salmax"       "minairtemp"   "maxairtemp"   "maxsst"      
[6] "maxsoilmoist" "Max_czcs"    
> 
> myy = "runoffnew"
> 
> myy
[1] "runoffnew"
> 
> 
> h2o.gbm(y = myy, x = list_of_column_names , data = australia.hex, n.trees = 10, interaction.depth = 3, n.minobsinnode = 2, shrinkage = 0.2, distribution= "gaussian")
  |======================================================================| 100%
IP Address: 127.0.0.1 
Port      : 54321 
Parsed Data Key: australia.hex 

GBM Model Key: GBM_a410fa049380b1f968c5dd46f3104fa1 

Overall Mean-squared Error:  31462.59 
> 
>    

I see that the name of the model key is:
GBM_a410fa049380b1f968c5dd46f3104fa1

So I can see that with my eyes.

How do I get that value into a variable?

I tried setting a variable = h2o.gbm() :


> mygbm_key = h2o.gbm(y = myy, x = list_of_column_names , data = australia.hex, n.trees = 10, interaction.depth = 3, n.minobsinnode = 2, shrinkage = 0.2, distribution= "gaussian")
  |======================================================================| 100%
> 
> mygbm_key
IP Address: 127.0.0.1 
Port      : 54321 
Parsed Data Key: australia.hex 

GBM Model Key: GBM_bb1a4664cbf6f99be853ebbdc2d4df6 

Overall Mean-squared Error:  31462.59 
> 
> mygbm_key['GBM Model Key']
Error in mygbm_key["GBM Model Key"] : 
  object of type 'S4' is not subsettable
> 
> mygbm_key[1]
Error in mygbm_key[1] : object of type 'S4' is not subsettable
> 
> 

So, it appears I got some kind of hash-like structure back:

> 
> class(mygbm_key)
[1] "H2OGBMModel"
attr(,"package")
[1] "h2o"
> 
> 

google: In R how to get value from H2OGBMModel?
Result: No useful answers.

I read further down in the tutorial and I see that I might not need 'GBM Model Key'.

After I finish building the model, I just need to refer to the whole model-object
when I call h2o.predict().

Here is a screendump:


> 
> mygbm_model = h2o.gbm(y = myy, x = list_of_column_names , data = australia.hex, n.trees = 10, interaction.depth = 3, n.minobsinnode = 2, shrinkage = 0.2, distribution= "gaussian")
  |======================================================================| 100%
> 


Now I have a variable which refers to the model.
I think I only need this variable.
I may not need the value of 'GBM Model Key'.

I will try to predict just one row:

> 
> row1 = australia.hex[1,]
> 
> row1
IP Address: 127.0.0.1 
Port      : 54321 
Parsed Data Key: Last.value.68 

  premax salmax minairtemp maxairtemp maxsst maxsoilmoist Max_czcs runoffnew
1    350   3448        287      301.5 302817         6.39     0.51       167
> 
> row1[list_of_column_names]
IP Address: 127.0.0.1 
Port      : 54321 
Parsed Data Key: Last.value.70 

  premax salmax minairtemp maxairtemp maxsst maxsoilmoist Max_czcs
1    350   3448        287      301.5 302817         6.39     0.51
> 
> row1x = row1[list_of_column_names]
> 
> row1x
IP Address: 127.0.0.1 
Port      : 54321 
Parsed Data Key: Last.value.72 

  premax salmax minairtemp maxairtemp maxsst maxsoilmoist Max_czcs
1    350   3448        287      301.5 302817         6.39     0.51
> 

Notice in the call below I do not need the key.
I only need a variable which I had filled when I called h2o.gbm():

> myprediction = h2o.predict(object = mygbm_model, newdata = row1x)
> 
> 
> myprediction
IP Address: 127.0.0.1 
Port      : 54321 
Parsed Data Key: GBMPredict_f986d47542464833ba3b583b8c4ed1e5 

   predict
1 171.5543
> 
> 
> 

</code>

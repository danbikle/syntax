<code class='bash'>
I start this demo by referring to this page:

http://docs.h2o.ai/Ruser/rtutorial.html

I tried walking through the gbm section.

First I made note of the h2o version:

> 
> 
> h2o.clusterInfo(localH2O)
R is connected to H2O cluster:
    H2O cluster uptime:         17 hours 51 minutes 
    H2O cluster version:        2.9.0.1689 
    H2O cluster name:           H2O_started_from_R 
    H2O cluster total nodes:    1 
    H2O cluster total memory:   1.54 GB 
    H2O cluster total cores:    4 
    H2O cluster allowed cores:  2 
    H2O cluster healthy:        TRUE 
> 
> 

The above version was posted to the web on or about 2015-02-06.

Next I tried their system.file() call.

They dont explain what it does but I figured it out by studying the result:

> 
> 
> ausPath = system.file("extdata", "australia.csv", package="h2o")
> 
> 


> 
> ausPath
[1] "/home/dan/rdir/lib/R/library/h2o/extdata/australia.csv"
> 
> 

It is creating a simple string from the location of a CSV file called:

australia.csv

I'm not sure where the file came from but obviously the author of the 
R tutorial was confident that the CSV file is now on my laptop.

He/She can do this because the file is part of my R installation.

Next I feed that to h2o.importFile() which is a call I often see in h2o-R scripts:

> 
> australia.hex = h2o.importFile(localH2O, path = ausPath)
  |======================================================================| 100%
> 
> 


Next they setup for a call to h2o.gbm().
This call will look at some rows and columns in the CSV, learn from them, and then
create an h2o object called a model.

They allow me to refer to model using a variable which they hand me.

They dont call it a variable; they call it a key.

The h2o.gbm() signature can be summarized as this:

h2o.gbm(y = a_column_name, x = list_of_column_names, data = australia.hex, otherpairs)

In the tutorial, other pairs is this:

n.trees = 10, interaction.depth = 3, n.minobsinnode = 2, shrinkage = 0.2, distribution= "gaussian"

I like the design of the above signature.

I have seen a design in other ML technology which has a shorter signature:

other_ml_gbm(yvector, x_vectors, otherpairs)

The signature looks better but gives higher probability of bugs.

other_ml_gbm() is not telling me that the elements of yvector need to be aligned with row-vectors in x_vectors.

h2o.gbm() does it the right way.

It is telling me that my x-values and y-values should live next to each other in an object named australia.hex; they should be aligned.

But wait, there is more.

h2o.gbm() gives me the option of picking a subset of columns from australia.hex as my x-values.

The columns which do not get named might be useful for certain tasks.

The most common example I can think of is to have a timestamp column.

A timestamp column allows me to sort australia.hex by date which is extremely valuable for 
dealing with time-series data.

The timestamp column would be useful for sorting but it is not a feature I want to pass to h2o.gbm().
The design of the h2o.gbm() API allows me to do that. Yay!



</code>

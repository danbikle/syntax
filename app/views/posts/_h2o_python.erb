<code class='bash'>

link here:

h2o-dev/h2o-algos/src/test/java/hex/example/workflowtest.py

https://github.com/h2oai/h2o-dev/blob/master/h2o-algos/src/test/java/hex/example/workflowtest.py

The Python demo asks me to start h2o from shell before I start.

I dont have h2o.jar in hdg.

I have one on my lappy.

It is up now.

cd ~/hdg/h2o-algos/src/test/java/hex/example

import h2o
ImportError: No module named h2o

google: In Python how I fix ImportError?
clues: sys.path or $PYTHONPATH, 
@Editor: __init__.py only indicates that the directory should be treated as a package, when its parent is either in sys.path or is itself a package.
see:
  http://docs.python.org/tutorial/modules.html#packages

import sys
sys.path
sys.path.append('/home/dan/hdg/h2o-py/h2o')




>>> 
>>> h2o.init()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/dan/hdg/h2o-py/h2o/h2o.py", line 143, in init
    H2OConnection(ip=ip, port=port)
  File "/home/dan/hdg/h2o-py/h2o/connection.py", line 41, in __init__
    cld = self._connect(size)
  File "/home/dan/hdg/h2o-py/h2o/connection.py", line 69, in _connect
    raise EnvironmentError("Max retries exceeded. Could not establish link to the H2O cloud @ " + str(self._ip) + ":" + str(self._port))
EnvironmentError: Max retries exceeded. Could not establish link to the H2O cloud @ localhost:54321
>>> 
>>> 

post:

hello world,

I'm working with python today.

I started h2o with h2o.jar like this:

java -jar h2o.jar

Then I checked the URL:

locahost:54321

And I checked the console.

I'm confident it came up okay.

Next I pulled h2o-dev:

dan@hp ~/hdg $ 
dan@hp ~/hdg $ 
dan@hp ~/hdg $ git log -1
commit 4a59c63cf31a88c9dd0c29e5487293c650fb4856
Author: eric eckstrand <eric.eckstrand@gmail.com>
Date:   Thu Feb 5 15:56:21 2015 -0800

    moved show method below class definition.
dan@hp ~/hdg $ 
dan@hp ~/hdg $ 
dan@hp ~/hdg $ 

Next I started Python and typed in this:

import sys
sys.path
sys.path.append('/home/dan/hdg/h2o-py/h2o')
import h2o

so far, so good.

Then I typed this:

>>> 
>>> h2o.init()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/dan/hdg/h2o-py/h2o/h2o.py", line 143, in init
    H2OConnection(ip=ip, port=port)
  File "/home/dan/hdg/h2o-py/h2o/connection.py", line 41, in __init__
    cld = self._connect(size)
  File "/home/dan/hdg/h2o-py/h2o/connection.py", line 69, in _connect
    raise EnvironmentError("Max retries exceeded. Could not establish link to the H2O cloud @ " + str(self._ip) + ":" + str(self._port))
EnvironmentError: Max retries exceeded. Could not establish link to the H2O cloud @ localhost:54321
>>> 
>>> 

I used curl to check locahost:54321:

dan@hp ~/hdg/h2o-algos/src/test/java/hex/example $ 
dan@hp ~/hdg/h2o-algos/src/test/java/hex/example $ 
dan@hp ~/hdg/h2o-algos/src/test/java/hex/example $ curl localhost:54321|head
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>dan - H2O</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="H2O Analytics Engine for Better Predictions" >
1    <meta name="author" content="0xdata" >
0 
0    <link rel="shortcut icon" href="/favicon.ico">
  9065    0  9065    0     0   984k      0 --:--:-- --:--:-- --:--:-- 1264k
(23) Failed writing body
dan@hp ~/hdg/h2o-algos/src/test/java/hex/example $ 
dan@hp ~/hdg/h2o-algos/src/test/java/hex/example $ 
dan@hp ~/hdg/h2o-algos/src/test/java/hex/example $ 

If you have any clues on how I might debug this Python-h2o connection issue,
please send them.

Thanks

Dan



here is Cliff's python:

import h2o

# Connect to a cluster
h2o.init()

# Pick either the big or the small demo.
# Big data is 10M rows
small_test = ["bigdata/laptop/citibike-nyc/2013-10.csv"]
big_test =   ["bigdata/laptop/citibike-nyc/2013-07.csv",
              "bigdata/laptop/citibike-nyc/2013-08.csv",
              "bigdata/laptop/citibike-nyc/2013-09.csv",
              "bigdata/laptop/citibike-nyc/2013-10.csv",
              "bigdata/laptop/citibike-nyc/2013-11.csv",
              "bigdata/laptop/citibike-nyc/2013-12.csv",
              "bigdata/laptop/citibike-nyc/2014-01.csv",
              "bigdata/laptop/citibike-nyc/2014-02.csv",
              "bigdata/laptop/citibike-nyc/2014-03.csv",
              "bigdata/laptop/citibike-nyc/2014-04.csv",
              "bigdata/laptop/citibike-nyc/2014-05.csv",
              "bigdata/laptop/citibike-nyc/2014-06.csv",
              "bigdata/laptop/citibike-nyc/2014-07.csv",
              "bigdata/laptop/citibike-nyc/2014-08.csv"]

# ----------
# 1- Load data
data = h2o.import_frame(path=big_test)


# ----------
# 2- light data munging

# Convert start time to: Day since the Epoch
startime = data["starttime"]
secsPerDay=1000*60*60*24
data["Days"] = (startime/secsPerDay).floor()
data.describe()

# Now do a monster Group-By.  Count bike starts per-station per-day
ddplycols=["Days","start station name"]
bph = h2o.ddply(data[ddplycols],ddplycols,"(%nrow)")
bph["C1"]._name = "bikes"
bph["bikes"].quantile().show()

# A little feature engineering
# Add in month-of-year (seasonality; fewer bike rides in winter than summer)
secs = bph["Days"]*secsPerDay
bph["Month"]     = secs.month()
# Add in day-of-week (work-week; more bike rides on Sunday than Monday)
bph["DayOfWeek"] = secs.dayOfWeek()
bph.describe()

# Test/train split
r = bph['Days'].runif()
train = bph[ r < 0.6  ]
test  = bph[(0.6 <= r) & (r < 0.9)]
hold  = bph[ 0.9 <= r ]
train.describe()
test .describe()

# ----------
# 3- build model on train; using test as validation

# Run GBM
gbm = h2o.gbm(x           =train.drop("bikes"),
              y           =train     ["bikes"],
              validation_x=test .drop("bikes"),
              validation_y=test      ["bikes"],
              ntrees=500, # 500 works well
              max_depth=6,
              min_rows=10,
              nbins=20,
              learn_rate=0.1)
#gbm.show()

# Run GLM
glm = h2o.glm(x           =train.drop("bikes"),
              y           =train     ["bikes"],
              validation_x=test .drop("bikes"),
              validation_y=test      ["bikes"])
#glm.show()


# ----------
# 4- Score on holdout set & report
train_r2_gbm = gbm.model_performance(train).r2()
test_r2_gbm  = gbm.model_performance(test ).r2()
hold_r2_gbm  = gbm.model_performance(hold ).r2()
print "GBM R2 TRAIN=",train_r2_gbm,", R2 TEST=",test_r2_gbm,", R2 HOLDOUT=",hold_r2_gbm

train_r2_glm = glm.model_performance(train).r2()
test_r2_glm  = glm.model_performance(test ).r2()
hold_r2_glm  = glm.model_performance(hold ).r2()
print "GLM R2 TRAIN=",train_r2_glm,", R2 TEST=",test_r2_glm,", R2 HOLDOUT=",hold_r2_glm


</code>

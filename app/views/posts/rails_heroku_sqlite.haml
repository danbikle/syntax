
.q1 Question:
.q2 On Heroku/Rails how do I implement sqlite3?
.tags
  %span.tagtag Tags:
  %a.xtag(href='/tags/heroku') heroku
  %a.xtag(href='/tags/sqlite3') sqlite3
  %a.xtag(href='/tags/rails') rails
  %a.xtag(href='/tags/read_only') read_only
  %a.xtag(href='/tags/active_record') active_record
%br/

By default, Heroku does not support my use of the sqlite3 gem when I deploy Rails applications there.
%br/
%br/

Many use-cases though, find that deploying a read-only Sqlite3 database embedded within the git-repo of my Rails app is useful.
%br/
%br/

For example, the Heroku free tier limits the number of records I can have in my Postgres database there.
%br/
%br/

If I architect my Rails app so that I use Postgres for update-able data and Sqlite3 for read-only data, I can squeeze more value out of Heroku.
%br/
%br/

Another use-case might ask me to check some read-only data into Git version control so I can track who changes it and when.
%br/
%br/

This use-case is addressed nicely if I place the data into a Sqlite3 database (which is just a simple binary file) and then commit the database to the Rails git-repo.
%br/
%br/

To start my deployment of Sqlite3 enabled Rails to Heroku, I read this post:
%br/
%br/

%a(href='/posts/heroku_buildpack') On Heroku, how do I install the sqlite3 gem?
%br/
%br/


Next, I ran these shell commands:
%br/
%br/
%pre
  =render 'rails_heroku_sqlite1'

Then, I added syntax and files to my Rails app which would force the Heroku buildpack to install Sqlite3 and the sqlite3 gem when I deploy my app to Heroku.
%br/
%br/

How?
%br/

First, I got a copy of the sqlite software from here:
%br/
%br/

%a(href='http://www.sqlite.org/2014/sqlite-autoconf-3080702.tar.gz' target='x')
  http://www.sqlite.org/2014/sqlite-autoconf-3080702.tar.gz
%br/
%br/


And I put it here:

%pre
  %code.bash
    myvendor/sqlite-autoconf-3080702.tar.gz

Using these shell commands:
%pre
  %code.bash
    cd myvendor/
    wget http://www.sqlite.org/2014/sqlite-autoconf-3080702.tar.gz


Then, I placed a shell script in directory:
%pre
  %code.bash
    /tmp/sqlite103/heroku_buildpack_scripts/

%pre
  =render 'rails_heroku_sqlite2'

Next, I ran these shell commands:
%pre
  %code.bash
    cd /tmp/sqlite103
    git init
    git add .
    git commit -am hello
    heroku apps:create sqlite103 --stack cedar --buildpack https://github.com/danbikle/heroku-buildpack-ruby
    git push heroku master

Then I queried the questions table in my sqlite3 database:
%pre
  %code.bash
    dan@hp /tmp/sqlite103 $ 
    dan@hp /tmp/sqlite103 $ heroku run console
    Running `console` attached to terminal... up, run.8955
    Loading production environment (Rails 4.1.8)
    irb(main):001:0> myc = Question.connection
    
    snip...
    
    irb(main):002:0> questions = Question.find_by_sql('select question from questions')
    &lt;= Question.find_by_sql('select question from questions')
    \=> [#&lt;Question question: "Is Ruby easy to learn?">]
    irb(main):003:0> quit
    quit
    dan@hp /tmp/sqlite103 $ 
    dan@hp /tmp/sqlite103 $ 
    dan@hp /tmp/sqlite103 $ 

So, that is a demo of how to deploy a Sqlite3 read-only database to a Rails app running on Heroku.

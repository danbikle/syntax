.q1 Question:
.q2 What is 2015_1220 Code Challenge?
.tags
  %span.tagtag Tags:
  %a.xtag(href='/tags/linux') linux
  %a.xtag(href='/tags/ubuntu') ubuntu
  %a.xtag(href='/tags/javascript') javascript
  %a.xtag(href='/tags/git') git
  %a.xtag(href='/tags/code_challenge') code_challenge
  %a.xtag(href='/tags/bikle101') bikle101
  %a.xtag(href='/tags/meetup') meetup
  %a.xtag(href='/tags/curl') curl
  %a.xtag(href='/tags/d3') d3
  %a.xtag(href='/tags/select') select
  %a.xtag(href='/tags/convnetjs') convnetjs
  %a.xtag(href='/tags/convnet') convnet
  %a.xtag(href='/tags/deeplearning') deeplearning
  %a.xtag(href='/tags/machine_learning') machine_learning
  %a.xtag(href='/tags/gspc') gspc
  %a.xtag(href='/tags/supervised_learning') supervised_learning
  %a.xtag(href='/tags/classification') classification
  %a.xtag(href='/tags/chrome') chrome
  %a.xtag(href='/tags/meteor') meteor
  %a.xtag(href='/tags/hacker_dojo') hacker_dojo
  %a.xtag(href='/tags/github') github
  %a.xtag(href='/tags/gitk') gitk
  %a.xtag(href='/tags/debugger') debugger
  %a.xtag(href='/tags/deep500') deep500
  %a.xtag(href='/tags/blue_green') blue_green

%br/

The 2015_1220 Code Challenge is a learning exercise for students attending Dan's Linux JavaScript Class at 3pm on 2015-12-20 at Hacker Dojo:

%br/
%br/

%a(href='http://www.meetup.com/Dans-Linux-JavaScript-Class/events/227427102' target='x')
  http://www.meetup.com/Dans-Linux-JavaScript-Class/events/227427102

%br/
%br/

This class is similar to the class on 2015-12-12 except that we will study D3.js a bit more.

%br/
%br/

During the week of 2015-12-13 I enhanced the UI and behavior of Deep500 so we will also study those enhancements.

%h2 UI On 2015-12-12
%img(src='/images/code_challenge2015_1220/dp10.png')
%hr/
%img(src='/images/code_challenge2015_1220/dp11.png')
%hr/
%img(src='/images/code_challenge2015_1220/dp12.png')
%hr/
%img(src='/images/code_challenge2015_1220/dp13.png')
%hr/

%h2 UI On 2015-12-19
%img(src='/images/code_challenge2015_1220/dp15.png')
%hr/
%img(src='/images/code_challenge2015_1220/dp16.png')
%hr/
%img(src='/images/code_challenge2015_1220/dp17.png')
%hr/
%img(src='/images/code_challenge2015_1220/dp18.png')
%hr/
%img(src='/images/code_challenge2015_1220/dp19.png')
%hr/

%br/
%br/

In class we will study Deep500 with the chrome-browser debugger:

%br/
%br/

%a(href='https://github.com/danbikle/deep500' target='x')
  https://github.com/danbikle/deep500

%br/
%br/

Already, the above repository should be deployed at meteor.com for you
so you can use a browser to study the behavior of the JavaScript:

%br/
%br/

%a(href='https://deep500.meteor.com' target='x')
  https://deep500.meteor.com


%br/
%br/

The steps I followed to run this repository on my Ubuntu host are listed below:

%ul
  %li
    This repo depends on Meteor so I installed it:
    %pre
      %code.bash
        cd ~
        curl https://install.meteor.com/ | sh
        echo 'export PATH=${HOME}/.meteor:$PATH' >> ~/.bashrc
        bash

  %li
    Next I ensured that my Ubuntu host had both curl and git:
    %pre
      %code.bash sudo apt-get install curl gitk

  %li
    Then I cloned the deep500 repo:
    %pre
      %code.bash
        cd ~
        git clone https://github.com/danbikle/deep500

  %li
    Then I started the Meteor server:
    %pre
      %code.bash
        cd ~/deep500
        git checkout -b mybranch
        \~/.meteor/meteor

  %li
    I started Chrome and browsed this URL:
    %br/
    %a(href='http://localhost:3000' target='x')
      http://localhost:3000

  %li I saw a page which was mostly empty.
  %li I created an account via the Sign-in-link.
  %li Then I logged in and created a model.
  %li Next, I clicked the 'chart em' button to see what I call the "blue-green visualization".


Now, I descibe below the path which data follows when I create a model with the Deep500 model-creation form.

%ul
  %li I fill in the form and press the save-button.
  %li Values from the form flow to met10.js
  %li In that file values flow to: Template.body.events()
  %li In that function values flow to: "click #button_newmodel": function(event){}
  %li Meteor gives me access to the form values inside an object named event.
  %li For example I get the value of the model name from: event.target.form.children.model_name.value
  %li The form uses radio buttons to help the user avoid making mistakes, but the code behind the radio buttons is verbose.
  %li
    For example the syntax which gets num_yrs value from one of seven radio buttons looks like this:
    %pre
      =render 'code_challenge2015_1220_10'
  %li After I get all the values from the form, I tinker with them a bit and then load them into an object called model_o.
  %li I found it convenient to make model_o a global object meaning that I can access it anywhere in my running JavaScript code.
  %li After I fill model_o with data, I call start_modelbuild() which resides in public/mmodel.js
  %li The two interesting JavaScript files in the public folder are mmodel.js and deep500.js
  %li I use mmodel.js to build a model from model_o
  %li I use deep500.js for tasks which might need to be reused in various situations.
  %li For example function lagn(n,my_a){} could be used in various situations.
  %li Once model_o is filled and control moves to start_modelbuild(), I use D3.js to tell the user what is happening.
  %li Next, I read /csv/GSPC.csv and move control into function cb1(err, csv_a).
  %li Inside cb1(), D3.js copies data from GSPC.csv into an array called csv_a.



%hr/
%h1 Questions

%ul
  %li
  %li How to get started with ConvNetJS?
  %li How to start the Chrome Debugger?
  %li To trace the JavaScript in this app, which files should I have loaded into sources tab?
  %li To study this app from outside-in, which files should I inspect first?
  %li
  %li
  %li
  %li
  %li
  %li
  %li
  %li
  %li
  %li
  %li
  %li
  %li
  %li
  %li
  %li
  %li

%hr/

That could be considered an adequate code challenge for a two hour Meetup.
%br/
%br/
If you have questions, e-me:
%br/
%br/
bikle101@gmail.com
%br/
%br/


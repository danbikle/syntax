<code class='bash'>dan@feb ~ $ 
dan@feb ~ $ 
dan@feb ~ $ cd Downloads/
dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ wget https://install.meteor.com
--2015-02-09 05:14:34--  https://install.meteor.com/
Resolving install.meteor.com (install.meteor.com)... 54.83.1.203, 54.225.83.89, 54.83.54.187, ...
Connecting to install.meteor.com (install.meteor.com)|54.83.1.203|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/plain]
Saving to: ‘index.html’

    [ <=>                                   ] 6,121       --.-K/s   in 0s      

2015-02-09 05:14:35 (353 MB/s) - ‘index.html’ saved [6121]

dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ mv index.html meteor_ins.sh
dan@feb ~/Downloads $ 


I like to know what the install script does so I figure out what tar-ball it wants.


dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ grep RELEASE meteor_ins.sh
RELEASE="1.0.3.1"
TARBALL_URL="https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/${RELEASE}/meteor-bootstrap-${PLATFORM}.tar.gz"
echo "Meteor ${RELEASE} has been installed in your home directory (~/.meteor)."
dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ grep PLATFORM meteor_ins.sh 
  PLATFORM="os.osx.x86_64"
    PLATFORM="os.linux.x86_32"
    PLATFORM="os.linux.x86_64"
TARBALL_URL="https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/${RELEASE}/meteor-bootstrap-${PLATFORM}.tar.gz"
dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ 


The install script wants this tar-ball:

dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ wget https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/${RELEASE}/meteor-bootstrap-${PLATFORM}.tar.gz
--2015-02-09 05:22:19--  https://d3sqy0vbqsdhku.cloudfront.net/packages-bootstrap/1.0.3.1/meteor-bootstrap-os.linux.x86_64.tar.gz
Resolving d3sqy0vbqsdhku.cloudfront.net (d3sqy0vbqsdhku.cloudfront.net)... 54.192.146.103, 54.192.146.127, 54.192.144.206, ...
Connecting to d3sqy0vbqsdhku.cloudfront.net (d3sqy0vbqsdhku.cloudfront.net)|54.192.146.103|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 73709944 (70M) [application/x-tar]
Saving to: ‘meteor-bootstrap-os.linux.x86_64.tar.gz.1’

100%[======================================>] 73,709,944  3.17MB/s   in 32s    

2015-02-09 05:22:51 (2.20 MB/s) - ‘meteor-bootstrap-os.linux.x86_64.tar.gz.1’ saved [73709944/73709944]
dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ 



dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ ll meteor-bootstrap-os.linux.x86_64.tar.gz 
-rw-rw-r-- 1 dan dan 73709944 Jan 21 01:51 meteor-bootstrap-os.linux.x86_64.tar.gz
dan@feb ~/Downloads $ 


Now I untar the tar-ball:


dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ rm -rf .meteor
dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ tar zxf meteor-bootstrap-os.linux.x86_64.tar.gz 
dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ ll .meteor/
total 36
drwxr-xr-x   4 dan dan  4096 Jan 21 01:48 ./
drwxr-xr-x   7 dan dan  4096 Feb  9 05:17 ../
lrwxrwxrwx   1 dan dan    62 Jan 21 01:48 meteor -> packages/meteor-tool/1.0.40/meteor-tool-os.linux.x86_64/meteor*
drwxr-xr-x   3 dan dan  4096 Jan 21 01:48 package-metadata/
drwxr-xr-x 124 dan dan 20480 Jan 21 01:47 packages/
dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ 


The tar-ball gave me .meteor/


dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ du -sh .meteor/
434M	.meteor/
dan@feb ~/Downloads $ 


I copy .meteor to my home-folder:


dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ mv .meteor ~
dan@feb ~/Downloads $ 
dan@feb ~/Downloads $ cd


Now I go looking for an executable named 'node':


dan@feb ~ $ cd .meteor
dan@feb ~/.meteor $ 
dan@feb ~/.meteor $ find . -name node -print
./packages/mongo/.1.0.11.pnwx20++os+web.browser+web.cordova/npm/node_modules/mongodb/node_modules/bson/test/node
./packages/meteor-tool/.1.0.40.1ef5dzv++os.linux.x86_64+web.browser+web.cordova/meteor-tool-os.linux.x86_64/dev_bundle/bin/node
./packages/meteor-tool/.1.0.40.1ef5dzv++os.linux.x86_64+web.browser+web.cordova/meteor-tool-os.linux.x86_64/dev_bundle/include/node
./packages/meteor-tool/.1.0.40.1ef5dzv++os.linux.x86_64+web.browser+web.cordova/meteor-tool-os.linux.x86_64/dev_bundle/lib/node_modules/cordova/node_modules/cordova-lib/node_modules/cordova-js/node_modules/browserify/node_modules/util/test/node
./packages/meteor-tool/.1.0.40.1ef5dzv++os.linux.x86_64+web.browser+web.cordova/meteor-tool-os.linux.x86_64/isopackets/mongo/npm/mongo/node_modules/mongodb/node_modules/bson/test/node
dan@feb ~/.meteor $ 


I like this node:


dan@feb ~/.meteor $ ln -s ~/.meteor/packages/meteor-tool/.1.0.40.1ef5dzv++os.linux.x86_64+web.browser+web.cordova/meteor-tool-os.linux.x86_64/dev_bundle/bin/node  .
dan@feb ~/.meteor $ cd
dan@feb ~ $ cd bin
dan@feb ~/bin $ ln -s ~/.meteor/node .
dan@feb ~/bin $ cd
dan@feb ~ $ which node
/home/dan/bin/node
dan@feb ~ $ 
dan@feb ~ $ 

Now I have node linked to ~/bin/ where my shell can find it.

Next I want a copy of npm.

I know that npm is just a script which calls npm-cli.js so I look for npm-cli.js:


dan@feb ~/.meteor $ 
dan@feb ~/.meteor $ find . -name npm-cli.js -print
./packages/meteor-tool/.1.0.40.1ef5dzv++os.linux.x86_64+web.browser+web.cordova/meteor-tool-os.linux.x86_64/dev_bundle/lib/node_modules/npm/bin/npm-cli.js
./packages/meteor-tool/.1.0.40.1ef5dzv++os.linux.x86_64+web.browser+web.cordova/meteor-tool-os.linux.x86_64/dev_bundle/lib/node_modules/cordova/node_modules/cordova-lib/node_modules/npm/bin/npm-cli.js
dan@feb ~/.meteor $ 
dan@feb ~/.meteor $ 
dan@feb ~/.meteor $ vi ~/bin/npm


I made my own npm script which is just two lines of code:

dan@feb ~ $ 
dan@feb ~ $ cd bin
dan@feb ~/bin $ 
dan@feb ~/bin $ cat npm
#!/bin/sh

basedir=~/.meteor/packages/meteor-tool/.1.0.40.1ef5dzv++os.linux.x86_64+web.browser+web.cordova/meteor-tool-os.linux.x86_64/dev_bundle/lib

node "$basedir/node_modules/npm/bin/npm-cli.js" "$@"
dan@feb ~/bin $ 
dan@feb ~/bin $ 
dan@feb ~/bin $ 


Now I test my npm script:

dan@feb ~ $ 
dan@feb ~ $ npm config list
; cli configs
registry = "https://registry.npmjs.org/"
user-agent = "npm/1.4.28 node/v0.10.33 linux x64"

; node bin location = /home/dan/bin/node
; cwd = /home/dan
; HOME = /home/dan
; 'npm config ls -l' to show all defaults.

dan@feb ~ $ 
dan@feb ~ $ 
dan@feb ~ $ 


Will my script install some random package?

dan@feb ~ $ 
dan@feb ~ $ npm install haml-coffee
haml-coffee@1.14.1 node_modules/haml-coffee
├── walkdir@0.0.7
├── coffee-script@1.9.0
└── optimist@0.6.1 (wordwrap@0.0.2, minimist@0.0.10)
dan@feb ~ $ 
dan@feb ~ $ 
dan@feb ~ $ 


I want to study my copy of node now.

dan@feb ~ $ 
dan@feb ~ $ which node
/home/dan/bin/node
dan@feb ~ $ 


What version of node do I have?

dan@feb ~ $ 
dan@feb ~ $ node -v
v0.10.33
dan@feb ~ $ 
dan@feb ~ $ 


Does node give help?

dan@feb ~ $ 
dan@feb ~ $ node -help
Usage:
  shell [options] -e string
    execute string in V8
  shell [options] file1 file2 ... filek
    run JavaScript scripts in file1, file2, ..., filek
  shell [options]
  shell [options] --shell [file1 file2 ... filek]
    run an interactive JavaScript shell
  d8 [options] file1 file2 ... filek
  d8 [options]
  d8 [options] --shell [file1 file2 ... filek]
    run the new debugging shell

Options:
  --use_strict (enforce strict mode)
        type: bool  default: false
  --es5_readonly (activate correct semantics for inheriting readonliness)
        type: bool  default: true
  --es52_globals (activate new semantics for global var declarations)
        type: bool  default: true
  --harmony_typeof (enable harmony semantics for typeof)
        type: bool  default: false
  --harmony_scoping (enable harmony block scoping)
        type: bool  default: false
  --harmony_modules (enable harmony modules (implies block scoping))
        type: bool  default: false
  --harmony_proxies (enable harmony proxies)
        type: bool  default: false
  --harmony_collections (enable harmony collections (sets, maps, and weak maps))
        type: bool  default: false
  --harmony (enable all harmony features (except typeof))
        type: bool  default: false
  --packed_arrays (optimizes arrays that have no holes)
        type: bool  default: true
  --smi_only_arrays (tracks arrays with only smi values)
        type: bool  default: true
  --clever_optimizations (Optimize object size, Array shift, DOM strings and string +)
        type: bool  default: true
  --unbox_double_arrays (automatically unbox arrays of doubles)
        type: bool  default: true
  --string_slices (use string slices)
        type: bool  default: true
  --crankshaft (use crankshaft)
        type: bool  default: true
  --hydrogen_filter (optimization filter)
        type: string  default: 
  --use_range (use hydrogen range analysis)
        type: bool  default: true
  --eliminate_dead_phis (eliminate dead phis)
        type: bool  default: true
  --use_gvn (use hydrogen global value numbering)
        type: bool  default: true
  --use_canonicalizing (use hydrogen instruction canonicalizing)
        type: bool  default: true
  --use_inlining (use function inlining)
        type: bool  default: true
  --max_inlined_source_size (maximum source size in bytes considered for a single inlining)
        type: int  default: 600
  --max_inlined_nodes (maximum number of AST nodes considered for a single inlining)
        type: int  default: 196
  --max_inlined_nodes_cumulative (maximum cumulative number of AST nodes considered for inlining)
        type: int  default: 196
  --loop_invariant_code_motion (loop invariant code motion)
        type: bool  default: true
  --collect_megamorphic_maps_from_stub_cache (crankshaft harvests type feedback from stub cache)
        type: bool  default: true
  --hydrogen_stats (print statistics for hydrogen)
        type: bool  default: false
  --trace_hydrogen (trace generated hydrogen to file)
        type: bool  default: false
  --trace_phase (trace generated IR for specified phases)
        type: string  default: Z
  --trace_inlining (trace inlining decisions)
        type: bool  default: false
  --trace_alloc (trace register allocator)
        type: bool  default: false
  --trace_all_uses (trace all use positions)
        type: bool  default: false
  --trace_range (trace range analysis)
        type: bool  default: false
  --trace_gvn (trace global value numbering)
        type: bool  default: false
  --trace_representation (trace representation types)
        type: bool  default: false
  --stress_pointer_maps (pointer map for every instruction)
        type: bool  default: false
  --stress_environments (environment for every instruction)
        type: bool  default: false
  --deopt_every_n_times (deoptimize every n times a deopt point is passed)
        type: int  default: 0
  --trap_on_deopt (put a break point before deoptimizing)
        type: bool  default: false
  --deoptimize_uncommon_cases (deoptimize uncommon cases)
        type: bool  default: true
  --polymorphic_inlining (polymorphic inlining)
        type: bool  default: true
  --use_osr (use on-stack replacement)
        type: bool  default: true
  --array_bounds_checks_elimination (perform array bounds checks elimination)
        type: bool  default: true
  --array_index_dehoisting (perform array index dehoisting)
        type: bool  default: true
  --dead_code_elimination (use dead code elimination)
        type: bool  default: true
  --trace_dead_code_elimination (trace dead code elimination)
        type: bool  default: false
  --trace_osr (trace on-stack replacement)
        type: bool  default: false
  --stress_runs (number of stress runs)
        type: int  default: 0
  --optimize_closures (optimize closures)
        type: bool  default: true
  --lookup_sample_by_shared (when picking a function to optimize, watch for shared function info, not JSFunction itself)
        type: bool  default: true
  --cache_optimized_code (cache optimized code for closures)
        type: bool  default: true
  --inline_construct (inline constructor calls)
        type: bool  default: true
  --inline_arguments (inline functions with arguments object)
        type: bool  default: true
  --inline_accessors (inline JavaScript accessors)
        type: bool  default: true
  --loop_weight (loop weight for representation inference)
        type: int  default: 1
  --optimize_for_in (optimize functions containing for-in loops)
        type: bool  default: true
  --opt_safe_uint32_operations (allow uint32 values on optimize frames if they are used only insafe operations)
        type: bool  default: true
  --parallel_recompilation (optimizing hot functions asynchronously on a separate thread)
        type: bool  default: false
  --trace_parallel_recompilation (track parallel recompilation)
        type: bool  default: false
  --parallel_recompilation_queue_length (the length of the parallel compilation queue)
        type: int  default: 2
  --experimental_profiler (enable all profiler experiments)
        type: bool  default: true
  --watch_ic_patching (profiler considers IC stability)
        type: bool  default: false
  --frame_count (number of stack frames inspected by the profiler)
        type: int  default: 1
  --self_optimization (primitive functions trigger their own optimization)
        type: bool  default: false
  --direct_self_opt (call recompile stub directly when self-optimizing)
        type: bool  default: false
  --retry_self_opt (re-try self-optimization if it failed)
        type: bool  default: false
  --count_based_interrupts (trigger profiler ticks based on counting instead of timing)
        type: bool  default: false
  --interrupt_at_exit (insert an interrupt check at function exit)
        type: bool  default: false
  --weighted_back_edges (weight back edges by jump distance for interrupt triggering)
        type: bool  default: false
  --interrupt_budget (execution budget before interrupt is triggered)
        type: int  default: 5888
  --type_info_threshold (percentage of ICs that must have type info to allow optimization)
        type: int  default: 15
  --self_opt_count (call count before self-optimization)
        type: int  default: 130
  --trace_opt_verbose (extra verbose compilation tracing)
        type: bool  default: false
  --debug_code (generate extra code (assertions) for debugging)
        type: bool  default: false
  --code_comments (emit comments in code disassembly)
        type: bool  default: false
  --enable_sse2 (enable use of SSE2 instructions if available)
        type: bool  default: true
  --enable_sse3 (enable use of SSE3 instructions if available)
        type: bool  default: true
  --enable_sse4_1 (enable use of SSE4.1 instructions if available)
        type: bool  default: true
  --enable_cmov (enable use of CMOV instruction if available)
        type: bool  default: true
  --enable_rdtsc (enable use of RDTSC instruction if available)
        type: bool  default: true
  --enable_sahf (enable use of SAHF instruction if available (X64 only))
        type: bool  default: true
  --enable_vfp3 (enable use of VFP3 instructions if available - this implies enabling ARMv7 and VFP2 instructions (ARM only))
        type: bool  default: true
  --enable_vfp2 (enable use of VFP2 instructions if available)
        type: bool  default: true
  --enable_armv7 (enable use of ARMv7 instructions if available (ARM only))
        type: bool  default: true
  --enable_sudiv (enable use of SDIV and UDIV instructions if available (ARM only))
        type: bool  default: true
  --enable_movw_movt (enable loading 32-bit constant by means of movw/movt instruction pairs (ARM only))
        type: bool  default: false
  --enable_unaligned_accesses (enable unaligned accesses for ARMv7 (ARM only))
        type: bool  default: true
  --enable_fpu (enable use of MIPS FPU instructions if available (MIPS only))
        type: bool  default: true
  --expose_natives_as (expose natives in global object)
        type: string  default: NULL
  --expose_debug_as (expose debug in global object)
        type: string  default: NULL
  --expose_gc (expose gc extension)
        type: bool  default: false
  --expose_externalize_string (expose externalize string extension)
        type: bool  default: false
  --stack_trace_limit (number of stack frames to capture)
        type: int  default: 10
  --builtins_in_stack_traces (show built-in functions in stack traces)
        type: bool  default: false
  --disable_native_files (disable builtin natives files)
        type: bool  default: false
  --inline_new (use fast inline allocation)
        type: bool  default: true
  --stack_trace_on_abort (print a stack trace if an assertion failure occurs)
        type: bool  default: true
  --trace (trace function calls)
        type: bool  default: false
  --mask_constants_with_cookie (use random jit cookie to mask large constants)
        type: bool  default: true
  --lazy (use lazy compilation)
        type: bool  default: true
  --trace_opt (trace lazy optimization)
        type: bool  default: false
  --trace_opt_stats (trace lazy optimization statistics)
        type: bool  default: false
  --opt (use adaptive optimizations)
        type: bool  default: true
  --always_opt (always try to optimize functions)
        type: bool  default: false
  --prepare_always_opt (prepare for turning on always opt)
        type: bool  default: false
  --trace_deopt (trace deoptimization)
        type: bool  default: false
  --min_preparse_length (minimum length for automatic enable preparsing)
        type: int  default: 1024
  --always_full_compiler (try to use the dedicated run-once backend for all code)
        type: bool  default: false
  --max_opt_count (maximum number of optimization attempts before giving up.)
        type: int  default: 10
  --compilation_cache (enable compilation cache)
        type: bool  default: true
  --cache_prototype_transitions (cache prototype transitions)
        type: bool  default: true
  --trace_debug_json (trace debugging JSON request/response)
        type: bool  default: false
  --debugger_auto_break (automatically set the debug break flag when debugger commands are in the queue)
        type: bool  default: true
  --enable_liveedit (enable liveedit experimental feature)
        type: bool  default: true
  --break_on_abort (always cause a debug break before aborting)
        type: bool  default: true
  --stack_size (default size of stack region v8 is allowed to use (in kBytes))
        type: int  default: 984
  --max_stack_trace_source_length (maximum length of function source code printed in a stack trace.)
        type: int  default: 300
  --always_inline_smi_code (always inline smi code in non-opt code)
        type: bool  default: false
  --max_new_space_size (max size of the new generation (in kBytes))
        type: int  default: 0
  --max_old_space_size (max size of the old generation (in Mbytes))
        type: int  default: 0
  --max_executable_size (max size of executable memory (in Mbytes))
        type: int  default: 0
  --gc_global (always perform global GCs)
        type: bool  default: false
  --gc_interval (garbage collect after <n> allocations)
        type: int  default: -1
  --trace_gc (print one trace line following each garbage collection)
        type: bool  default: false
  --trace_gc_nvp (print one detailed trace line in name=value format after each garbage collection)
        type: bool  default: false
  --trace_gc_ignore_scavenger (do not print trace line after scavenger collection)
        type: bool  default: false
  --print_cumulative_gc_stat (print cumulative GC statistics in name=value format on exit)
        type: bool  default: false
  --trace_gc_verbose (print more details following each garbage collection)
        type: bool  default: false
  --trace_fragmentation (report fragmentation for old pointer and data pages)
        type: bool  default: false
  --trace_external_memory (print amount of external allocated memory after each time it is adjusted.)
        type: bool  default: false
  --collect_maps (garbage collect maps from which no objects can be reached)
        type: bool  default: true
  --flush_code (flush code that we expect not to use again before full gc)
        type: bool  default: true
  --incremental_marking (use incremental marking)
        type: bool  default: true
  --incremental_marking_steps (do incremental marking steps)
        type: bool  default: true
  --trace_incremental_marking (trace progress of the incremental marking)
        type: bool  default: false
  --track_gc_object_stats (track object counts and memory usage)
        type: bool  default: false
  --use_idle_notification (Use idle notification to reduce memory footprint.)
        type: bool  default: true
  --use_ic (use inline caching)
        type: bool  default: true
  --native_code_counters (generate extra code for manipulating stats counters)
        type: bool  default: false
  --always_compact (Perform compaction on every full GC)
        type: bool  default: false
  --lazy_sweeping (Use lazy sweeping for old pointer and data spaces)
        type: bool  default: true
  --never_compact (Never perform compaction on full GC - testing only)
        type: bool  default: false
  --compact_code_space (Compact code space on full non-incremental collections)
        type: bool  default: true
  --incremental_code_compaction (Compact code space on full incremental collections)
        type: bool  default: true
  --cleanup_code_caches_at_gc (Flush inline caches prior to mark compact collection and flush code caches in maps during mark compact cycle.)
        type: bool  default: true
  --random_seed (Default seed for initializing random generator (0, the default, means to use system random).)
        type: int  default: 0
  --use_verbose_printer (allows verbose printing)
        type: bool  default: true
  --allow_natives_syntax (allow natives syntax)
        type: bool  default: false
  --trace_parse (trace parsing and preparsing)
        type: bool  default: false
  --trace_sim (Trace simulator execution)
        type: bool  default: false
  --check_icache (Check icache flushes in ARM and MIPS simulator)
        type: bool  default: false
  --stop_sim_at (Simulator stop after x number of instructions)
        type: int  default: 0
  --sim_stack_alignment (Stack alingment in bytes in simulator (4 or 8, 8 is default))
        type: int  default: 8
  --abort_on_uncaught_exception (abort program (dump core) when an uncaught exception is thrown)
        type: bool  default: false
  --trace_exception (print stack trace when throwing exceptions)
        type: bool  default: false
  --preallocate_message_memory (preallocate some memory to build stack traces.)
        type: bool  default: false
  --randomize_hashes (randomize hashes to avoid predictable hash collisions (with snapshots this option cannot override the baked-in seed))
        type: bool  default: true
  --hash_seed (Fixed seed to use to hash property keys (0 means random)(with snapshots this option cannot override the baked-in seed))
        type: int  default: 0
  --preemption (activate a 100ms timer that switches between V8 threads)
        type: bool  default: false
  --regexp_optimization (generate optimized regexp code)
        type: bool  default: true
  --testing_bool_flag (testing_bool_flag)
        type: bool  default: true
  --testing_int_flag (testing_int_flag)
        type: int  default: 13
  --testing_float_flag (float-flag)
        type: float  default: 2.500000
  --testing_string_flag (string-flag)
        type: string  default: Hello, world!
  --testing_prng_seed (Seed used for threading test randomness)
        type: int  default: 42
  --testing_serialization_file (file in which to serialize heap)
        type: string  default: /tmp/serdes
  --extra_code (A filename with extra code to be included in the snapshot (mksnapshot only))
        type: string  default: NULL
  --help (Print usage message, including flags, on console)
        type: bool  default: true
  --dump_counters (Dump counters on exit)
        type: bool  default: false
  --debugger (Enable JavaScript debugger)
        type: bool  default: false
  --remote_debugger (Connect JavaScript debugger to the debugger agent in another process)
        type: bool  default: false
  --debugger_agent (Enable debugger agent)
        type: bool  default: false
  --debugger_port (Port to use for remote debugging)
        type: int  default: 5858
  --map_counters (Map counters to a file)
        type: string  default: 
  --js_arguments (Pass all remaining arguments to the script. Alias for "--".)
        type: arguments  default: 
  --debug_compile_events (Enable debugger compile events)
        type: bool  default: true
  --debug_script_collected_events (Enable debugger script collected events)
        type: bool  default: true
  --gdbjit (enable GDBJIT interface (disables compacting GC))
        type: bool  default: false
  --gdbjit_full (enable GDBJIT interface for all code objects)
        type: bool  default: false
  --gdbjit_dump (dump elf objects with debug info to disk)
        type: bool  default: false
  --gdbjit_dump_filter (dump only objects containing this substring)
        type: string  default: 
  --force_marking_deque_overflows (force overflows of marking deque by reducing it's size to 64 words)
        type: bool  default: false
  --stress_compaction (stress the GC compactor to flush out bugs (implies --force_marking_deque_overflows))
        type: bool  default: false
  --log (Minimal logging (no API, code, GC, suspect, or handles samples).)
        type: bool  default: false
  --log_all (Log all events to the log file.)
        type: bool  default: false
  --log_runtime (Activate runtime system %Log call.)
        type: bool  default: false
  --log_api (Log API events to the log file.)
        type: bool  default: false
  --log_code (Log code events to the log file without profiling.)
        type: bool  default: false
  --log_gc (Log heap samples on garbage collection for the hp2ps tool.)
        type: bool  default: false
  --log_handles (Log global handle events.)
        type: bool  default: false
  --log_snapshot_positions (log positions of (de)serialized objects in the snapshot.)
        type: bool  default: false
  --log_suspect (Log suspect operations.)
        type: bool  default: false
  --prof (Log statistical profiling information (implies --log-code).)
        type: bool  default: false
  --prof_auto (Used with --prof, starts profiling automatically)
        type: bool  default: true
  --prof_lazy (Used with --prof, only does sampling and logging when profiler is active (implies --noprof_auto).)
        type: bool  default: false
  --prof_browser_mode (Used with --prof, turns on browser-compatible mode for profiling.)
        type: bool  default: true
  --log_regexp (Log regular expression execution.)
        type: bool  default: false
  --sliding_state_window (Update sliding state window counters.)
        type: bool  default: false
  --logfile (Specify the name of the log file.)
        type: string  default: v8.log
  --ll_prof (Enable low-level linux profiler.)
        type: bool  default: false
  --gc_fake_mmap (Specify the name of the file for fake gc mmap used in ll_prof)
        type: string  default: /tmp/__v8_gc__
dan@feb ~ $ 
dan@feb ~ $ 
dan@feb ~ $ 


Can node add two numbers?

dan@feb ~ $ 
dan@feb ~ $ node
> hello = 3.3 + 4.4
7.7
> hello
7.7
> 
</code>

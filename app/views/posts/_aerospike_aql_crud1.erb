<code class='bash'>dan@hp ~/acp $ 
dan@hp ~/acp $ 
dan@hp ~/acp $ aql
Aerospike Query
Copyright 2013 Aerospike. All rights reserved.

aql> 
aql> 
aql> help
COMMANDS
    
    DDL
        CREATE INDEX &lt;index> ON &lt;ns>[.&lt;set>] (&lt;bin>) NUMERIC|STRING
        DROP INDEX &lt;ns>[.&lt;set>] &lt;index>
        REPAIR INDEX &lt;index> ON &lt;ns>[.&lt;set>]
        
            &lt;ns> is the namespace for the index.
            &lt;set> is the set name for the index.
            &lt;index> is the name of the index.
        
        Examples:
        
            CREATE INDEX idx_foo ON test.demo (foo) NUMERIC
            DROP INDEX test.demo idx_foo
            REPAIR INDEX idx_foo ON test.demo
        
    DML
        INSERT INTO &lt;ns>[.&lt;set>] (PK, &lt;bins>) VALUES (&lt;key>, &lt;values>)
        DELETE FROM &lt;ns>[.&lt;set>] WHERE PK = &lt;key>
        
            &lt;ns> is the namespace for the record.
            &lt;set> is the set name for the record.
            &lt;key> is the record's primary key.
            &lt;key> is the record's primary key.
            &lt;bins> is a comma-separated list of bin names.
            &lt;values> is comma-separated list of bin values. Keep it NULL (case insensitive & w/o quotes) to delete the bin
        
        Examples:
        
            INSERT INTO test.demo (PK, foo, bar) VALUES ('key1', 123, 'abc')
            DELETE FROM test.demo WHERE PK = 'key1'
        
    QUERY
        SELECT &lt;bins> FROM &lt;ns>[.&lt;set>]
        SELECT &lt;bins> FROM &lt;ns>[.&lt;set>] WHERE &lt;bin> = &lt;value>
        SELECT &lt;bins> FROM &lt;ns>[.&lt;set>] WHERE &lt;bin> BETWEEN &lt;lower> AND &lt;upper>
        SELECT &lt;bins> FROM &lt;ns>[.&lt;set>] WHERE PK = &lt;key>
        
            &lt;ns> is the namespace for the records to be queried.
            &lt;set> is the set name for the record to be queried.
            &lt;key> is the record's primary key.
            &lt;bin> is the name of a bin.
            &lt;value> is the value of a bin.
            &lt;bins> can be either a wildcard (*) or a comma-separated list of bin names.
            &lt;lower> is the lower bound for a numeric range query.
            &lt;upper> is the lower bound for a numeric range query.
        
        Examples:
        
            SELECT * FROM test.demo
            SELECT * FROM test.demo WHERE PK = 'key1'
            SELECT foo, bar FROM test.demo WHERE PK = 'key1'
            SELECT foo, bar FROM test.demo WHERE foo = 123
            SELECT foo, bar FROM test.demo WHERE foo BETWEEN 0 AND 999
        
    MANAGE UDFS
        REGISTER MODULE '&lt;filepath>'
        SHOW MODULES
        REMOVE MODULE &lt;filename>
        DESC MODULE &lt;filename>
        
            &lt;filepath> is file path to the UDF module(in single quotes).
            &lt;filename> is file name of the UDF module.
        
        Examples:
        
            REGISTER MODULE '~/test.lua' 
            SHOW MODULES
            DESC MODULE test.lua
            REMOVE MODULE test.lua
        
    INVOKING UDFS
        EXECUTE &lt;module>.&lt;function>(&lt;args>) ON &lt;ns>[.&lt;set>]
        EXECUTE &lt;module>.&lt;function>(&lt;args>) ON &lt;ns>[.&lt;set>] WHERE PK = &lt;key>
        AGGREGATE &lt;module>.&lt;function>(&lt;args>) ON &lt;ns>[.&lt;set>] WHERE &lt;bin> = &lt;value>
        AGGREGATE &lt;module>.&lt;function>(&lt;args>) ON &lt;ns>[.&lt;set>] WHERE &lt;bin> BETWEEN &lt;lower> AND &lt;upper>
        
            &lt;module> is UDF module containing the function to invoke.
            &lt;function> is UDF to invoke.
            &lt;args> is a comma-separated list of argument values for the UDF.
            &lt;ns> is the namespace for the records to be queried.
            &lt;set> is the set name for the record to be queried.
            &lt;key> is the record's primary key.
            &lt;bin> is the name of a bin.
            &lt;value> is the value of a bin.
            &lt;lower> is the lower bound for a numeric range query.
            &lt;upper> is the lower bound for a numeric range query.
        
        Examples:
        
            EXECUTE myudfs.udf1(2) ON test.demo
            EXECUTE myudfs.udf1(2) ON test.demo WHERE PK = 'key1'
            AGGREGATE myudfs.udf2(2) ON test.demo WHERE foo = 123
            AGGREGATE myudfs.udf2(2) ON test.demo WHERE foo BETWEEN 0 AND 999
        
    INFO
        SHOW NAMESPACES | SETS | BINS | INDEXES
        SHOW SCANS | QUERIES
        STAT NAMESPACE &lt;ns> | INDEX &lt;ns> &lt;indexname>
        STAT SYSTEM
        
    JOB MANAGEMENT
        KILL_QUERY &lt;transaction_id>
        KILL_SCAN &lt;scan_id>
        
    USER ADMINISTRATION
        CREATE USER &lt;user> PASSWORD &lt;password> ROLE[S] &lt;role1>,&lt;role2>...
            roles: read|read-write|sys-admin|user-admin
        DROP USER &lt;user>
        SET PASSWORD &lt;password> [FOR &lt;user>]
        GRANT ROLE[S] &lt;role1>,&lt;role2>... TO &lt;user>]
        REVOKE ROLE[S] &lt;role1>,&lt;role2>... FROM &lt;user>]
        SHOW USER [&lt;user>]
        SHOW USERS
        
    SETTINGS
        TIMEOUT                       (time in ms, default: 1000 ms) 
        RECORD_TTL                    (time in ms, default: 0 ms) 
        VERBOSE                       (true | false, default false) 
        ECHO                          (true | false, default false) 
        FAIL_ON_CLUSTER_CHANGE        (true | false, default true, policy applies to scans) 
        OUTPUT                        (table | json, default table) 
        LUA_USERPATH                  &lt;path>, default : /opt/aerospike/usr/udf/lua 
        LUA_SYSPATH                   &lt;path>, default : /opt/aerospike/sys/udf/lua 
        
        To get the value of a setting, run:
        	
            aql> GET &lt;setting>
        	
        To set the value of a setting, run:
        	
            aql> SET &lt;setting> &lt;value>
        	
    OTHER
        RUN &lt;filepath>
        HELP
        QUIT|EXIT|Q
aql> 
aql> 
aql> 
</code>

.q1 Question:
.q2 In Rails 4.x how do I step through Ruby code using a debugger?
.tags
  %span.tagtag Tags:
  %a(href='/tags/byebug') byebug
  %a(href='/tags/rails') rails
  %a(href='/tags/ruby') ruby
  %a(href='/tags/debugger') debugger
  %a(href='/tags/rubygems') rubygems

%br/
Rubygems offers a gem called debugger.
%br/
%br/

When I create a new rails project I should see the debugger gem listed in the Gemfile.
%br/
%br/

Although the debugger entry is commented out, 
I consider that entry to be evidence 
that the debugger should behave properly 
when I want to use it 
to step through Ruby syntax in my Rails app.
%br/
%br/

screendump:
%pre
  =render 'rails_debugger1'

If I were the product manager for Rails, I would remove the debugger
gem declaration from default Gemfiles.
%br/
%br/

It is obviously broken.
%br/
%br/

I looked at this page:
%br/
%br/

%a(href='https://github.com/cldwalker/debugger' target='x')
  https://github.com/cldwalker/debugger

%br/
%br/
I noticed this tip:
%br/
%br/

Description
%br/
A fork of ruby-debug(19) that works on 1.9.2 and 1.9.3 and installs easily for rvm/rbenv rubies. 

%br/
%br/
ruby >= 2.0 are not supported
%br/
%br/

For 2.X rubies, consider using byebug.
%br/
%br/

I found it:
%br/
%br/

%a(href='http://rubygems.org/gems/byebug' target='x')
  http://rubygems.org/gems/byebug
%br/
%br/


I tried installing it:
%br/

%pre
  =render 'rails_debugger2'
%br/

I did vi Gemfile:
%br/

%pre
  %code.ruby
    gem 'byebug', group: [:development, :test]

Then I did this:
%pre
  %code.bash
    bundle install

The byebug gem worked very well with my combo of Ruby 2.1.5 and Rails 4.1.8:
%br/

%pre
  =render 'rails_debugger3'

%pre
  =render 'rails_debugger4'
%br/
In the future when I need to step through Rails code while Rails is responding to a request, I will use the byebug gem.

%br/
%a(href='http://rubygems.org/gems/byebug' target='x')
  http://rubygems.org/gems/byebug
%br/
%br/

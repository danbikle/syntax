.q1 Question:
.q2 In H2O Sparkling-Water how does TimeTransform work?
.tags
  %span.tagtag Tags:
  %a.xtag(href='/tags/daysvec') daysvec
  
  %a.xtag(href='/tags/h2o') h2o
  %a.xtag(href='/tags/0xdata') 0xdata
  %a.xtag(href='/tags/sparkling') sparkling
  %a.xtag(href='/tags/apache') apache
  %a.xtag(href='/tags/spark') spark
  %a.xtag(href='/tags/scala') scala
  %a.xtag(href='/tags/dkv') dkv
  %a.xtag(href='/tags/bikesdf') bikesdf
  %a.xtag(href='/tags/github') github
  %a.xtag(href='/tags/citibike') citibike
  %a.xtag(href='/tags/update') update
  %a.xtag(href='/tags/sc') sc
  %a.xtag(href='/tags/get') get
  %a.xtag(href='/tags/starttime') starttime
  %a.xtag(href='/tags/meetup') meetup
  %a.xtag(href='/tags/starttimef') starttimef
  %a.xtag(href='/tags/map') map
  %a.xtag(href='/tags/dataframe') dataframe
  %a.xtag(href='/tags/names') names
  %a.xtag(href='/tags/colnames') colnames
  %a.xtag(href='/tags/month') month
  %a.xtag(href='/tags/getmonthofyear') getmonthofyear
  %a.xtag(href='/tags/getdayofweek') getdayofweek
  %a.xtag(href='/tags/msec') msec
  %a.xtag(href='/tags/addnum') addnum
  %a.xtag(href='/tags/dayofweek') dayofweek
  %a.xtag(href='/tags/doit') doit
  %a.xtag(href='/tags/timetransform') timetransform
  %a.xtag(href='/tags/timesplit') timesplit
  %a.xtag(href='/tags/subclass') subclass
  %a.xtag(href='/tags/override') override
  %a.xtag(href='/tags/mutabledatetime') mutabledatetime
  %a.xtag(href='/tags/mrtask') mrtask


%br/

I bumped into TimeTransform here:

%br/
%br/

%a(href='https://github.com/h2oai/sparkling-water/blob/master/examples/scripts/Meetup20150226.script.scala' target='x')
  https://github.com/h2oai/sparkling-water/blob/master/examples/scripts/Meetup20150226.script.scala


%br/
%br/

The API call looks like this:

%pre
  %code.scala
    val daysVec = bikesPerDayDF('Days)
    val finalBikeDF = bikesPerDayDF.add(new TimeTransform().doIt(daysVec))

I can see that TimeTransform() is being used to generate data for a
new DataFrame column.

%br/
%br/

The call to TimeTransform() creates an object which then allows me to call
an instance method named doIt() which accepts a column named Days from 
bikesPerDayDF DataFrame.

%br/
%br/

I found the syntax for TimeTransform() at the URL listed below (near the bottom):

%br/
%br/

%a(href='https://github.com/h2oai/sparkling-water/blob/master/examples/src/main/scala/org/apache/spark/examples/h2o/CitiBikeSharingDemo.scala' target='x')
  https://github.com/h2oai/sparkling-water/blob/master/examples/src/main/scala/org/apache/spark/examples/h2o/CitiBikeSharingDemo.scala


%br/
%br/

When I read the syntax I see it follows a pattern I noticed before when I studied
another object called TimeSplit.

%br/
%br/

Although I understand Scala poorly,
my guess is that TimeTransform is a subclass of MRTask.

%br/
%br/

I do not understand why MRTask has the name, TimeSplit, in brackets to the right.

%br/
%br/

I do see that TimeTransform has two definitions for instance methods.

%br/
%br/

The first method, doIt(), accepts the column full of days.

%br/
%br/

Then doIt() implicitly calls map().

%br/
%br/

It is obvious that map() uses date-arithmetic to transform days-values
into values: Month and DayOfWeek.

%br/
%br/

When map() is done, doIt() returns two DataFrame columns full of appropriate
data: Month and DayOfWeek.

%br/
%br/

Later these columns are used as ML-features which makes intuitive sense.

%br/
%br/

The use-case here is to predict bike usage in NYC.

%br/
%br/

Bikes might be used more in warm months and on weekends.

%br/
%br/

If that is true it makes sense to transform days-past-epoch into 
Month and DayOfWeek.

%br/



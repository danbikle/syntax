.q1 Question:
.q2 In Rails/Heroku how do I access read-only sqlite db?
.tags
  %span.tagtag Tags:
  %a(href='/tags/rails') rails
  %a(href='/tags/sqlite') sqlite
  %a(href='/tags/sqlite3') sqlite3
  %a(href='/tags/heroku') heroku
  %a(href='/tags/active_record') active_record

%br/
Recently I encountered a use-case where I wanted to access a read-only sqlite3 database file from a Rails application running on Heroku.

notes:
http://stackoverflow.com/questions/16825367/static-read-only-sqlite3-database-in-heroku



Allowing SQLite3 read only can be enabled by following the steps from this git repo.

https://github.com/yotsumoto/heroku-buildpack-ruby-with-sqlite3

After running:

$ heroku config:set BUILDPACK_URL=https://github.com/yotsumoto/heroku-buildpack-ruby-with-sqlite3

I was able to git push heroku master with gem 'sqlite3' still in the Gemfile.

https://github.com/heroku/heroku-buildpack-ruby

signin to github.com

fork 
https://github.com/heroku/heroku-buildpack-ruby

https://github.com/danbikle/heroku-buildpack-ruby

try:

first confirm that unaltered buildpack works okay:

cd /tmp/
rails new sqlite10 -d postgresql
cd sqlite10
git init
git add .
git commit -am 'hi'

heroku help apps:create

heroku apps:create sqlite10 --stack cedar --buildpack https://github.com/danbikle/heroku-buildpack-ruby.git

sd:

dan@hp /tmp/sqlite10 $ 
dan@hp /tmp/sqlite10 $ heroku apps:create sqlite10 --stack cedar --buildpack https://github.com/danbikle/heroku-buildpack-ruby.git
Creating sqlite10... done, stack is cedar
BUILDPACK_URL=https://github.com/danbikle/heroku-buildpack-ruby.git
https://sqlite10.herokuapp.com/ | git@heroku.com:sqlite10.git
Git remote heroku added
dan@hp /tmp/sqlite10 $ 
dan@hp /tmp/sqlite10 $ 

git push heroku master


dan@hp /tmp/sqlite10 $ git push heroku master
Initializing repository, done.
Counting objects: 63, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (52/52), done.
Writing objects: 100% (63/63), 16.45 KiB | 0 bytes/s, done.
Total 63 (delta 2), reused 0 (delta 0)

-----> Fetching custom git buildpack... done
-----> Ruby app detected
-----> Compiling Ruby/Rails
-----> Using Ruby version: ruby-2.0.0
-----> Installing dependencies using 1.6.3
       Running: bundle install --without development:test --path vendor/bundle --binstubs vendor/bundle/bin -j4 --deployment
       Fetching gem metadata from https://rubygems.org/..........
       Installing i18n 0.6.11

snip...

Study this:

https://github.com/yotsumoto/heroku-buildpack-ruby-with-sqlite3/blob/master/README.md

In order to install sqlite3 gem properly, we have to solve these two problems like sqlite3.h and libsqlite3.so.

I only need sqlite3.h

Why?

Because a copy of libsqlite3.so.0.8.6 resides on the heroku host already in this dir:
"#{yaml_lib}/libsqlite3.so"


find / -name sqlite3.h -print

/usr/include/sqlite3.h

I copied it to RR/vendor:

cp -p /usr/include/sqlite3.h /tmp/sqlite10/vendor/


dan@hp /tmp/sqlite10/vendor $ 
dan@hp /tmp/sqlite10/vendor $ ll
total 1100
drwxrwxr-x  3 dan dan   4096 Dec  3 22:40 ./
drwxrwxr-x 13 dan dan   4096 Dec  3 22:19 ../
drwxrwxr-x  4 dan dan   4096 Dec  3 22:18 assets/
-rw-r--r--  1 dan dan 353468 Jan  2  2014 sqlite3.h
dan@hp /tmp/sqlite10/vendor $ 
dan@hp /tmp/sqlite10/vendor $ 
dan@hp /tmp/sqlite10/vendor $ 

git add .
git commit -am sqlite_invendor




I cloned my fork of 

https://github.com/heroku/heroku-buildpack-ruby

so I could edit a file using my laptop:

cd /tmp/
git clone git@github.com:danbikle/heroku-buildpack-ruby.git

yotsumoto gives 2 clues:

https://github.com/yotsumoto/heroku-buildpack-ruby-with-sqlite3#symbolic-link-libsqlite3so

https://github.com/yotsumoto/heroku-buildpack-ruby-with-sqlite3#copy-sqlite3h

vi /tmp/heroku-buildpack-ruby/lib/language_pack/ruby.rb

search for string:
  "Running: #{bundle_command}"

Insert 2 lines of syntax above it:

run("ln -s /usr/lib/libsqlite3.so.0.8.6 #{yaml_lib}/libsqlite3.so") # for sqlite3 make symbolic link
run("cp #{File.expand_path( "../../vendor/sqlite3.h", $PROGRAM_NAME )} #{yaml_include}") # for sqlite3 prepare sqlite3.h

Refer to these 3 links:
https://github.com/yotsumoto/heroku-buildpack-ruby-with-sqlite3/blob/master/lib/language_pack/ruby.rb#L525

https://github.com/heroku/heroku-buildpack-ruby/blob/master/lib/language_pack/ruby.rb#L516

https://github.com/danbikle/heroku-buildpack-ruby/blob/master/lib/language_pack/ruby.rb#L517

See if I can still use my /tmp/sqlite10 rails app:

dan@hp /tmp/sqlite10 $ gphm
Fetching repository, done.
Counting objects: 10, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (8/8), done.
Writing objects: 100% (8/8), 477.04 KiB | 715.00 KiB/s, done.
Total 8 (delta 3), reused 0 (delta 0)

-----> Fetching custom git buildpack... done
-----> Ruby app detected
-----> Compiling Ruby/Rails
-----> Using Ruby version: ruby-2.0.0

I added the sqlite gem to the Gemfile:

gem 'sqlite3'

I did bundle install
git add .
git commit -am hi
git push heroku master

It failed.
It could not detect sqlite3.h

try recreating sqlite10 rails app.

dan@hp /tmp/sqlite10 $ heroku apps:destroy --app sqlite10

 !    WARNING: Potentially Destructive Action
 !    This command will destroy sqlite10 (including all add-ons).
 !    To proceed, type "sqlite10" or re-run this command with --confirm sqlite10

> sqlite10
Destroying sqlite10 (including all add-ons)... done
dan@hp /tmp/sqlite10 $ heroku apps:create sqlite10 --stack cedar --buildpack https://github.com/danbikle/heroku-buildpack-ruby.git
Creating sqlite10... done, stack is cedar
BUILDPACK_URL=https://github.com/danbikle/heroku-buildpack-ruby.git
https://sqlite10.herokuapp.com/ | git@heroku.com:sqlite10.git
Git remote heroku added
dan@hp /tmp/sqlite10 $ 
dan@hp /tmp/sqlite10 $ 

darn it still failed.

I'll experiment with bundle installing sqlite into vendor

http://ryan.mcgeary.org/2011/02/09/vendor-everything-still-applies/

bundle install --path vendor

bundle package



oooooooooo


try this:

heroku apps:create sqlite10 --stack cedar --buildpack https://github.com/yotsumoto/heroku-buildpack-ruby-with-sqlite3

failed...

in /tmp/heroku-buildpack-ruby/lib/language_pack/ruby.rb

tinker with this

  def compile
    instrument 'ruby.compile' do
      # check for new app at the beginning of the compile
      new_app?
      Dir.chdir(build_path)
      remove_vendor_bundle
      install_ruby
      install_jvm
      setup_language_pack_environment
      setup_profiled
      allow_git do
        install_bundler_in_app
        build_bundler
        post_bundler
        create_database_yml
        install_binaries
        run_assets_precompile_rake_task
      end
      super
    end
  end


try:

  def compile
    instrument 'ruby.compile' do
#      # check for new app at the beginning of the compile
#      new_app?
#      Dir.chdir(build_path)
#      remove_vendor_bundle
#      install_ruby
#      install_jvm
#      setup_language_pack_environment
#      setup_profiled
#      allow_git do
#        install_bundler_in_app
#        build_bundler
#        post_bundler
#        create_database_yml
#        install_binaries
#        run_assets_precompile_rake_task
#      end
#      super
    end
  end

worked!


try:

  def compile
    instrument 'ruby.compile' do
      # check for new app at the beginning of the compile
      new_app?
      Dir.chdir(build_path)
#      remove_vendor_bundle
      install_ruby
#      install_jvm
      setup_language_pack_environment
      setup_profiled
      allow_git do
        install_bundler_in_app
        build_bundler
        post_bundler
        create_database_yml
        install_binaries
        run_assets_precompile_rake_task
      end
      super
    end
  end

worked!

try:
  def compile
    instrument 'ruby.compile' do
      # check for new app at the beginning of the compile
      new_app?
      Dir.chdir(build_path)
#      remove_vendor_bundle
      install_ruby
#      install_jvm
#      setup_language_pack_environment
#      setup_profiled
#      allow_git do
#        install_bundler_in_app
#        build_bundler
#        post_bundler
#        create_database_yml
#        install_binaries
#        run_assets_precompile_rake_task
#      end
#      super
    end
  end


worked!


look at 
def setup_language_pack_environment

-----> Using Ruby version: ruby-2.0.0
       slug_vendor_base:
       vendor/bundle/ruby/2.0.0


how do I find out the location of Rails.root?

I can use bundle config to help me configure gem command line options.

http://bundler.io/v1.7/man/bundle-config.1.html

demo:

gem install mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config
bundle config build.mysql --with-mysql-config=/usr/local/mysql/bin/mysql_config

it gets stored here:
app/.bundle/config

goog: bundle config sqlite

useful:
http://stackoverflow.com/questions/6853046/error-installing-sqlite3-gem-via-bundler

https://community.webfaction.com/questions/5006/bundle-install-wont-install-sqlite3

oooooooooooooo

on vbox-vm this worked:

mkdir -p /home/dan/ssqlite /home/dan/tmp
cd ~/tmp/
wget http://www.sqlite.org/2014/sqlite-autoconf-3080702.tar.gz
tar zxf sqlite-autoconf-3080702.tar.gz
cd sqlite-autoconf-3080702
./configure --prefix=/home/dan/ssqlite
make
make install
cd ~
gem install sqlite3 -- --with-sqlite3-dir=/home/dan/ssqlite

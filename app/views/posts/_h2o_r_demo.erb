<code class='bash'>

An h2o R demo by Dan.

I start this story with a URL:

http://h2o.ai/download/

I picked the most recent nightly development build.

It served me a page with a link which I wgetted:


dan@hp ~/Downloads $ 
dan@hp ~/Downloads $ wget http://s3.amazonaws.com/h2o-release/h2o/master/1689/h2o-2.9.0.1689.zip
--2015-02-07 09:40:00--  http://s3.amazonaws.com/h2o-release/h2o/master/1689/h2o-2.9.0.1689.zip
Resolving s3.amazonaws.com (s3.amazonaws.com)... 54.231.244.4
Connecting to s3.amazonaws.com (s3.amazonaws.com)|54.231.244.4|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 145574470 (139M) [application/zip]
Saving to: 'h2o-2.9.0.1689.zip'

100%[======================================>] 145,574,470 1.65MB/s   in 1m 42s 

2015-02-07 09:41:43 (1.36 MB/s) - 'h2o-2.9.0.1689.zip' saved [145574470/145574470]

dan@hp ~/Downloads $ 
dan@hp ~/Downloads $ 
dan@hp ~/Downloads $ 

I did this:



dan@hp ~/Downloads $ 
dan@hp ~/Downloads $ cd /tmp/
dan@hp /tmp $ 
dan@hp /tmp $ unzip ~/Downloads/h20-2.9.0.1689.zip
unzip:  cannot find or open /home/dan/Downloads/h20-2.9.0.1689.zip, /home/dan/Downloads/h20-2.9.0.1689.zip.zip or /home/dan/Downloads/h20-2.9.0.1689.zip.ZIP.
dan@hp /tmp $ 
dan@hp /tmp $ 
dan@hp /tmp $ unzip ~/Downloads/h2o-2.9.0.1689.zip
Archive:  /home/dan/Downloads/h2o-2.9.0.1689.zip
   creating: h2o-2.9.0.1689/
  inflating: h2o-2.9.0.1689/h2o-sources.jar  
   creating: h2o-2.9.0.1689/hadoop/
  inflating: h2o-2.9.0.1689/hadoop/h2odriver_hdp2.0.6.jar  
  inflating: h2o-2.9.0.1689/hadoop/h2odriver_mapr2.1.3.jar  
  inflating: h2o-2.9.0.1689/hadoop/h2odriver_mapr4.0.1.jar  
  inflating: h2o-2.9.0.1689/hadoop/h2odriver_cdh4_yarn.jar  
  inflating: h2o-2.9.0.1689/hadoop/README.txt  
  inflating: h2o-2.9.0.1689/hadoop/h2odriver_cdh5.jar  
  inflating: h2o-2.9.0.1689/hadoop/h2odriver_hdp2.1.jar  
  inflating: h2o-2.9.0.1689/hadoop/h2odriver_cdh3.jar  
  inflating: h2o-2.9.0.1689/hadoop/h2odriver_hdp1.3.2.jar  
  inflating: h2o-2.9.0.1689/hadoop/h2odriver_hdp2.2.jar  
  inflating: h2o-2.9.0.1689/hadoop/h2odriver_cdh4.jar  
  inflating: h2o-2.9.0.1689/hadoop/h2odriver_mapr3.1.1.jar  
   creating: h2o-2.9.0.1689/ec2/
  inflating: h2o-2.9.0.1689/ec2/h2o-cluster-distribute-h2o.sh  
  inflating: h2o-2.9.0.1689/ec2/h2o-cluster-distribute-flatfile.sh  
  inflating: h2o-2.9.0.1689/ec2/h2o-cluster-print-info.py  
  inflating: h2o-2.9.0.1689/ec2/h2o-cluster-launch-instances.py  
  inflating: h2o-2.9.0.1689/ec2/h2o-cluster-test-ssh.sh  
  inflating: h2o-2.9.0.1689/ec2/h2o-cluster-distribute-aws-credentials.sh  
  inflating: h2o-2.9.0.1689/ec2/h2o-cluster-download-h2o.sh  
  inflating: h2o-2.9.0.1689/ec2/README.txt  
  inflating: h2o-2.9.0.1689/ec2/h2o-cluster-stop-h2o.sh  
  inflating: h2o-2.9.0.1689/ec2/h2o-cluster-start-h2o.sh  
   creating: h2o-2.9.0.1689/tableau/
  inflating: h2o-2.9.0.1689/tableau/ClaimsTweedieAnalysis_8.2.twb  
  inflating: h2o-2.9.0.1689/tableau/Demo_Template_8.2.twb  
   creating: h2o-2.9.0.1689/tableau/meta_data/
  inflating: h2o-2.9.0.1689/tableau/meta_data/claims_metadata.csv  
  inflating: h2o-2.9.0.1689/tableau/meta_data/airlines_meta.csv  
  inflating: h2o-2.9.0.1689/tableau/meta_data/claims_coefficients.csv  
  inflating: h2o-2.9.0.1689/tableau/Demo_Template_8.1.twb  
  inflating: h2o-2.9.0.1689/tableau/TableauTutorial.docx  
   creating: h2o-2.9.0.1689/tableau/data/
  inflating: h2o-2.9.0.1689/tableau/data/claimsdata.csv.tar.xz  
  inflating: h2o-2.9.0.1689/README.txt  
   creating: h2o-2.9.0.1689/spark/
  inflating: h2o-2.9.0.1689/spark/README.txt  
   creating: h2o-2.9.0.1689/R/
  inflating: h2o-2.9.0.1689/R/README.txt  
  inflating: h2o-2.9.0.1689/R/h2o_2.9.0.1689.tar.gz  
  inflating: h2o-2.9.0.1689/h2o.jar  
  inflating: h2o-2.9.0.1689/LICENSE.txt  
  inflating: h2o-2.9.0.1689/h2o-model.jar  
dan@hp /tmp $ 
dan@hp /tmp $ ll h2o
ls: cannot access h2o: No such file or directory
dan@hp /tmp $ 
dan@hp /tmp $ 
dan@hp /tmp $ ln -s h2o-2.9.0.1689 h2o
dan@hp /tmp $ 
dan@hp /tmp $ cd h2o
dan@hp /tmp/h2o $ cd R
dan@hp /tmp/h2o/R $ 
dan@hp /tmp/h2o/R $ ll
total 40424
drwxr-xr-x 2 dan dan     4096 Feb  6 23:03 ./
drwxr-xr-x 7 dan dan     4096 Feb  6 23:03 ../
-rw-r--r-- 1 dan dan     1624 Feb  6 23:00 README.txt
-rw-r--r-- 1 dan dan 41378429 Feb  6 23:02 h2o_2.9.0.1689.tar.gz
dan@hp /tmp/h2o/R $ 
dan@hp /tmp/h2o/R $ 
dan@hp /tmp/h2o/R $ R

R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> 
> remove.packages('h2o')
Removing package from '/home/dan/rdir/lib/R/library'
(as 'lib' is unspecified)
Updating HTML index of packages in '.Library'
Making 'packages.html' ... done
> 
> 
> install.packages("h2o_2.9.0.1689.tar.gz", repos = NULL, type = "source")
* installing *source* package 'h2o' ...
** R
** demo
** inst
** preparing package for lazy loading
Creating a generic function for 'summary' from package 'base' in package 'h2o'
Creating a generic function for 'colnames' from package 'base' in package 'h2o'
Creating a generic function for 't' from package 'base' in package 'h2o'
Creating a generic function for 'colnames<-' from package 'base' in package 'h2o'
Creating a generic function for 'nrow' from package 'base' in package 'h2o'
Creating a generic function for 'ncol' from package 'base' in package 'h2o'
Creating a generic function for 'sd' from package 'stats' in package 'h2o'
Creating a generic function for 'var' from package 'stats' in package 'h2o'
Creating a generic function for 'as.factor' from package 'base' in package 'h2o'
Creating a generic function for 'is.factor' from package 'base' in package 'h2o'
Creating a generic function for 'which' from package 'base' in package 'h2o'
Creating a generic function for 'levels' from package 'base' in package 'h2o'
Creating a generic function for 'apply' from package 'base' in package 'h2o'
Creating a generic function for 'findInterval' from package 'base' in package 'h2o'
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded
* DONE (h2o)
> 
> 
> library(h2o)
Loading required package: statmod
Loading required package: survival
Loading required package: splines

----------------------------------------------------------------------

Your next step is to start H2O and get a connection object (named
'localH2O', for example):
    > localH2O = h2o.init()

For H2O package documentation, ask for help:
    > ??h2o

After starting H2O, you can use the Web UI at http://localhost:54321
For more information visit http://docs.0xdata.com

----------------------------------------------------------------------


Attaching package: 'h2o'

The following objects are masked from 'package:base':

    ifelse, max, min, strsplit, sum, tolower, toupper

> 
> 
> 
> localH2O = h2o.init()

H2O is not running yet, starting it now...

Note:  In case of errors look at the following log files:
    /tmp/RtmpIy4qIS/h2o_dan_started_from_r.out
    /tmp/RtmpIy4qIS/h2o_dan_started_from_r.err

java version "1.7.0_60-ea"
Java(TM) SE Runtime Environment (build 1.7.0_60-ea-b15)
Java HotSpot(TM) 64-Bit Server VM (build 24.60-b09, mixed mode)

Successfully connected to http://127.0.0.1:54321 

R is connected to H2O cluster:
    H2O cluster uptime:         6 seconds 247 milliseconds 
    H2O cluster version:        2.9.0.1689 
    H2O cluster name:           H2O_started_from_R 
    H2O cluster total nodes:    1 
    H2O cluster total memory:   1.54 GB 
    H2O cluster total cores:    4 
    H2O cluster allowed cores:  2 
    H2O cluster healthy:        TRUE 

Note:  As started, H2O is limited to the CRAN default of 2 CPUs.
       Shut down and restart H2O as shown below to use all your CPUs.
           > h2o.shutdown(localH2O)
           > localH2O = h2o.init(nthreads = -1)

> 
> 
> irisPath = system.file("extdata", "iris.csv", package="h2o")
> 
> irisPath
[1] "/home/dan/rdir/lib/R/library/h2o/extdata/iris.csv"
> 
> 
> iris.hex = h2o.importFile(localH2O, irisPath)
  |======================================================================| 100%
> 
> 
> summary(iris.hex)
 C1              C2              C3              C4             
 Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  
 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  
 Median :5.800   Median :3.000   Median :4.300   Median :1.300  
 Mean   :5.843   Mean   :3.054   Mean   :3.759   Mean   :1.199  
 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  
 Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  
 C5                 
 Iris-setosa    :50 
 Iris-versicolor:50 
 Iris-virginica :50 
                    
                    
                    
> 
> 
> head(iris.hex)
   C1  C2  C3  C4          C5
1 5.1 3.5 1.4 0.2 Iris-setosa
2 4.9 3.0 1.4 0.2 Iris-setosa
3 4.7 3.2 1.3 0.2 Iris-setosa
4 4.6 3.1 1.5 0.2 Iris-setosa
5 5.0 3.6 1.4 0.2 Iris-setosa
6 5.4 3.9 1.7 0.4 Iris-setosa
> 
> 
> 

</code>

<code class='python'># pandas_demo.py

import pandas as pd
import numpy  as np

# Here is some data:
d_cp_l = [
['2015-12-31',2043.94]
,['2015-12-30',2063.36]
,['2015-12-29',2078.36]
,['2015-12-28',2056.50]
,['2015-12-24',2060.98]
,['2015-12-23',2064.29]
,['2015-12-22',2038.96]
,['2015-12-21',2021.15]
,['2015-12-18',2005.55]
,['2015-12-17',2041.89]
,['2015-12-16',2073.07]
,['2015-12-15',2043.41]
,['2015-12-14',2021.93]
,['2015-12-11',2012.36]
,['2015-12-10',2052.22]
,['2015-12-09',2047.61]
,['2015-12-08',2063.59]
,['2015-12-07',2077.07]
,['2015-12-04',2091.68]
,['2015-12-03',2049.62]
,['2015-12-02',2079.51]
,['2015-12-01',2102.62]
]

# I should reverse the order of the data so it ascends by date:
d_cp_l = [row for row in reversed(d_cp_l)]

# I should get the column of date strings
cdate_l = [row[0] for row in d_cp_l]

# I should get the column of prices:
cp   = [row[1] for row in d_cp_l]

# Work towards dependent array:
cplead_l = cp + [cp[-1]]

# Work towards independent array:
cplag1_l = [cp[0]] + cp

# I should snip off ends so new columns as long as cp:
cplead_l = cplead_l[1:]
cplag1_l = cplag1_l[:-1]

# NumPy allows me to do arithmetic on its Arrays.
# I should convert my lists to Arrays:
cp_a     = np.array(cp)
cplead_a = np.array(cplead_l)
cplag1_a = np.array(cplag1_l)

# I should use simple arithmetic to calculate pct-deltas:
pctlead_a = 100.0 * (cplead_a - cp_a)/cp_a
pctlag1_a = 100.0 * (cp_a - cplag1_a)/cplag1_a

# I should put my columns into a DataFrame:
df1            = pd.DataFrame(cdate_l)
df1.columns    = ['cdate']
df1['cp']      = cp
df1['pctlag1'] = pctlag1_a
df1['pctlead'] = pctlead_a

# I should create simple predicates:
pred_lt0 = df1['pctlag1'] < 0
pred_gt0 = df1['pctlag1'] > 0

# I should apply them:
lt0_df = df1[pred_lt0]
gt0_df = df1[pred_gt0]

# I should study pctlead:
pctlead_lt0_df     = lt0_df['pctlead']
pctlead_lt0_mean_n = np.mean(pctlead_lt0_df)
print(pctlead_lt0_mean_n)

pctlead_gt0_df     = gt0_df['pctlead']
pctlead_gt0_mean_n = np.mean(pctlead_gt0_df)
print(pctlead_gt0_mean_n)

# I can stack predicates which then acts as AND:
pred_lt0  = df1['pctlag1'] < 0
pred_gtm1 = df1['pctlag1'] > -1
lt0_gtm1_df = df1[pred_lt0][pred_gtm1]
print(lt0_gtm1_df)
</code>

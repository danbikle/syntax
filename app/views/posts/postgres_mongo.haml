.q1 Question:
.q2 How to compare PostgreSQL to MongoDB?
.tags
  %a.xtag(href='/tags/linux') linux
  .tag postgres
  .tag postgresql
  .tag mongo
  .tag mongodb

%br/

On Ubuntu it is easy to install both PostgreSQL and MongoDB on the same host.

%br/
%br/

Then it is easy to compare them.

%h2 PostgreSQL AKA Postgres

When I installed Postgres on my Linux laptop I followed some steps.

%br/
%br/

I issued a shell command:
%pre
  %code.bash apt-get install postgresql postgresql-server-dev-all libpq-dev

After that finished, I rebooted the laptop.

%br/
%br/

The next series of steps depend on the name of my Linux account.
%br/
%br/

On my laptop I login to Linux as dan.
%br/
%br/

Postgres works well on my laptop if I create an account inside of Postgres named dan.
%br/
%br/

Also Postgres wants me to create a database inside of Postgres named dan.
%br/
%br/

So I did those two tasks using some simple commands:

%pre
  %code.bash sudo su - postgres

The above command put me into the Linux-Postgres account.
%br/
%br/

Then I used a command name psql to connect to the Postgres instance.
%br/
%br/

I saw this:

%pre
  %code.bash
    postgres@nia111:~$ 
    postgres@nia111:~$ 
    dan@nia111:~/x611 $ sudo su - postgres
    [sudo] password for dan: 
    postgres@nia111:~$ 
    postgres@nia111:~$ 
    postgres@nia111:~$ 
    postgres@nia111:~$ psql
    psql (9.3.11)
    Type "help" for help.
    postgres=# 
    postgres=# 

The last prompt looks like a shell prompt but it is actually a SQL prompt.
%br/
%br/


I have seen many people mistake a Postgres SQL prompt for a Linux shell prompt.
%br/
%br/

Next I created a dan account inside of Postgres:
%pre
  %code.sql create role dan with superuser login;


Then, I created a database named dan:
%pre
  %code.sql create database dan;

Next, I entered '\q' which allowed me to exit psql.
%br/
%br/

Then, I entered the shell command: exit which allowed me to leave the
postgres Linux account and return to my dan Linux account.

%h2 Copy, Create, List, Update, Delete (CCLUD)

When I encounter a new technology I learn it by understanding both nouns and verbs which frequently appear inside the technology.

%br/
%br/

Five verbs which I usually see in software systems are listed below:

%br/
%br/

Copy, Create, List, Update, Delete (CCLUD)

%br/
%br/

The above five verbs are prominent within Postgres.

%br/
%br/

Above I displayed two examples of the Create-verb:
%ul
  %li I created the role, dan.
  %li I created the database, dan.

Also I updated the role, dan by giving it two privileges: superuser and login.

%h2 Postgres Nouns

For Postgres, the nouns which I want to operate on with the 5 verbs are listed below:
%ul
  %li Postgres-Instance
  %li Postgres-Linux-Account
  %li Postgres-Role
  %li Postgres-Database
  %li Postgres-Table
  %li Postgres-Row
  %li Postgres-Index
  %li Postgres-View

The most common verb-noun combinations are listed below:
%ul
  %li Create Table
  %li List   Table
  %li Delete Table
  %li Copy Rows
  %li Create Rows
  %li List Rows
  %li Update Rows
  %li Delete Rows

Examples of the 8 above combinations are listed below.

%h2 Postgres: Create Table

The main command line interface (CLI) for Postgres is psql.

When I work with Postgres I often place my syntax in a script and then feed the script to psql.

Here is a simple demo of me running a one line SQL script:

%pre
  %code.bash
    echo "select 'hello world';" > /tmp/myscript.sql
    psql -f /tmp/myscript.sql

I created a script which is a demo of the idea Create Table:

%pre
  =render 'postgres_mongo10'

So, I ran the above script on my laptop and asked, "How to list that table?"

%h2 Postgres: List Table

To list my tables I start psql and then issue a simple command.

A demo is listed below:
%pre
  =render 'postgres_mongo11'

%h2 Postgres: Delete Table

In Postgres, the syntax I use to implement the Delete Table idea is 'drop table':
%pre
  %code.sql drop table mytable;

%h2 Postgres: Copy Rows

Postgres offers me a variety of ways to copy table rows from point a to point b.

One useful technique is to copy the rows from a CSV file.

Below I list some syntax to copy two CSV files from Yahoo into the /tmp/ folder.

%pre
  =render 'postgres_mongo12'

So, I ran the above script on my laptop and then ran a SQL script to copy tkrdates.csv into a table called tkrdates:

%pre
  =render 'postgres_mongo13'

When I ran the above script it issued very little output:

%pre
  %code.bash
    dan@nia111:~/x611/public/apr16 $ 
    dan@nia111:~/x611/public/apr16 $ psql -f copycsv.sql
    DROP TABLE
    CREATE TABLE
    COPY 22525
    dan@nia111:~/x611/public/apr16 $ 
    dan@nia111:~/x611/public/apr16 $ 

%h2 Postgres: Create Rows

The above demo actually demonstrated two ideas: Copy Rows and Create Rows.

Usually I use the postgres insert command to implement the Create Rows idea.

Below, I list a demo of postgres insert:

%pre
  %code.bash
    insert into tkrdates(tkr,cdate,cp) values ('IBM','2016-04-15',151.72);
    select tkr,cdate,cp from tkrdates where tkr = 'IBM';

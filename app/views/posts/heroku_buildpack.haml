When I deploy a Rails-app on Heroku, they run it in a Linux environment.
%br/
%br/

The Heroku Linux environment contains most of the Linux libraries I need.
%br/
%br/

On rare occasions, I need to enhance the Linux libraries in my Heroku Linux environments.
%br/
%br/

Since Heroku does not offer a Linux environment which has Sqlite3 installed,
I can use Sqlite3 as an example of how to enhance Heroku Linux environments.
%br/
%br/

So, here is the question.
%br/
%br/

.q1 Question:
.q2 On Heroku, how do I install the sqlite3 gem?
.tags
  %span.tagtag Tags:
  %a(href='/tags/heroku') heroku
  %a(href='/tags/rails') rails
  %a(href='/tags/sqlite') sqlite
  %a(href='/tags/ruby') ruby
  %a(href='/tags/buildpack') buildpack
%br/

To me, Heroku offers three general ways to interact with its Linux environments.
%br/
%br/

First, is a CLI called the Heroku Toolbelt:
%br/
%br/

%a(href='http://www.google.com/search?q=Heroku+Toolbelt' target='x')
  http://www.google.com/search?q=Heroku+Toolbelt
%br/
%br/


Second, is an API:
%br/
%br/

%a(href='https://devcenter.heroku.com/categories/platform-api' target='x')
  https://devcenter.heroku.com/categories/platform-api
%br/
%br/


Third, is the Heroku Ruby Buildpack for Cedar:
%br/
%br/

%a(href='https://github.com/heroku/heroku-buildpack-ruby' target='x')
  https://github.com/heroku/heroku-buildpack-ruby
%br/
%br/


I call it 'buildpack' and that is is the main topic of this post.
%br/
%br/

If I want to install the sqlite3 gem on my Linux laptop, 
I need to first install Sqlite3 which is easy to do if I have the root password.
%br/
%br/

Since I do not have root access on Heroku Linux,
how can I install Sqlite3 on Heroku Linux?
%br/
%br/

The answer is I use buildpack to do it.
%br/
%br/

First, I login to my github.com account and visit this page:
%br/
%br/

%a(href='https://github.com/heroku/heroku-buildpack-ruby' target='x')
  https://github.com/heroku/heroku-buildpack-ruby
%br/
%br/

Then, I press the fork-button at the top-right.
%br/
%br/

Next, I clone my fork of the repo to my Linux laptop.
%br/
%br/

If I don't have a Linux laptop handy I use a copy of Linux running in a
VirtualBox or on a provider like Amazon or DigitalOcean.
%br/
%br/

From my clone of my forked repo, I load this file in my editor:
%br/
%br/

lib/language_pack/ruby.rb
%br/
%br/

You can refer to the original file here:
%br/
%br/

%a(href='https://github.com/heroku/heroku-buildpack-ruby/blob/master/lib/language_pack/ruby.rb' target='x')
  https://github.com/heroku/heroku-buildpack-ruby/blob/master/lib/language_pack/ruby.rb

%br/
%br/


Next I search for the string:
%br/
%br

Running
%br/
%br

As I write this post, that string is on line 516, but that will change as Heroku enhances the file in the future months/years.
%br/
%br

Anyway, I add a few lines of code to the file:
%br/
%br

%pre
  =render 'heroku_buildpack10'


My intent behind this syntax is to defer the installation of Sqlite3
until after Heroku has seen my Rails-app.
%br/
%br

The way it should work is that all installation activity should
be driven by a script named dothis.bash and that script should
live in my Rails repo, not my buildpack repo.
%br/
%br

In my Rails repo the location of the script is here:
%br/
%br

Rails.root/heroku_buildpack_scripts/dothis.bash
%br/
%br

When I first studied this question of using buildpack to add the sqlite3 gem
to Heroku I found two other buildpack repos via google:
%br/
%br

%a(href='https://github.com/yotsumoto/heroku-buildpack-ruby-with-sqlite3' target='x')
  https://github.com/yotsumoto/heroku-buildpack-ruby-with-sqlite3
%br/
%br

%a(href='https://github.com/c4mprod/heroku-buildpack-ruby-sqlite' target='x')
  https://github.com/c4mprod/heroku-buildpack-ruby-sqlite
%br/
%br


Their approach is different than mine.
%br/
%br

They make significant changes to the buildpack.
%br/
%br

My approach is to make the absolute minimum change to the buildpack.
%br/
%br

My change is really just one line of code:

%pre
  %code.ruby
    bundler_output &lt;&lt; pipe("cmds")

This is good because it will make it easy for me to keep my buildpack merged with the original Heroku buildpack in the future months/years when they enhance it.
%br/
%br

After I enhance my buildpack and git push it to github, I can test it with a new-empty Rails-app.
%br/
%br

Some shell commands I can use to do that test are listed below:

%pre
  %code.bash
    cd /tmp/
    rails new hero_app10 -d postgresql
    cd hero_app10
    sed -i '1a ruby "2.1.5"' Gemfile
    bundle install
    git init
    git add .
    git commit -am hello
    heroku apps:create hero-app10 --stack cedar --buildpack https://github.com/danbikle/heroku-buildpack-ruby


The Rails-app, hero_app10, should deploy the same as if I used the original buildpack.
%br/
%br

This should happen because my if-then logic will look for this file in hero_app10:
%br/
%br

Rails.root/heroku_buildpack_scripts/dothis.bash
%br/
%br

But hero_app10 is a new empty Rails-app.
%br/
%br

So, dothis.bash does not exist yet.
%br/
%br

So, the buildpack script does not try to run it.
%br/
%br

If dothis.bash does exist, the buildpack script should try to run it and I can
test this by placing one shell command in the script:

%pre
  %code.bash
    echo $0 says hello world.

That should work okay and then I can enhance dothis.bash so it does two tasks.
%br/
%br

First, it installs Sqlite3.
%br/
%br

Second, it installs the sqlite3 gem.
%br/
%br

The syntax for that is displayed below:
%pre
  =render 'heroku_buildpack11'


%h1 hi

:ruby
  mydf = "#{Rails.root}/public/mydata.csv"
  require 'csv'
  longjson = []
  CSV.read(mydf).each{|row| longjson<< row if row[0]=~/2014-12/}
  longjson = longjson.map{|row| [DateTime.strptime(row[0],'%Y-%m-%d'),row[4]]}
  longjson = longjson.map{|row| {:x=>row[0].strftime('%s').to_i, :y=>row[1].to_f}}
  longjson = longjson.sort_by{|hsh| hsh[:x]}
  cp1      = longjson[0][:y]
  miny     = longjson.map{|row| row[:y]}.min
  maxy     = longjson.map{|row| row[:y]}.max
  longjson_s = longjson.to_s.gsub(/:x/,'x').gsub(/:y/,'y').gsub(/=>/,':')
  sdf      = "#{Rails.root}/public/spy611.csv"
  myrows   = []
  pjson    = []
  CSV.read(sdf).each{|row| myrows<< row if(row[1]=~/2014-12/)and(row[0]=='lr')}
  cp = cp1
  myrows.each{|row|
    # fields: algo,close_price_date,prediction,pct_gain
    cpdate       = row[1]
    prediction   = row[2].to_f
      if row[3].present?
        pct_gain = row[3].to_f 
        if prediction>=0.5
          mygain =  0.01 * pct_gain * cp - 2.9
        else
          mygain = -0.01 * pct_gain * cp + 2.9
        end
        cp    += mygain
        row[4] = cp
      end # if row[3].present?
  }
  pjson[0] = [myrows[0][1],cp1]
  for pj in (1..(myrows.length)-1) do
    pjson[pj] = [myrows[pj][1],myrows[pj-1][4]]
  end
  pjson = pjson.map{|row| [DateTime.strptime(row[0],'%Y-%m-%d'),row[1]]}
  pjson = pjson.map{|row| {:x=>row[0].strftime('%s').to_i, :y=>row[1]}}
  pjson = pjson.sort_by{|hsh| hsh[:x]}
  ally = [pjson.map{|row| row[:y]},miny,maxy].flatten.sort
  miny = ally.min
  maxy = ally.max
  pjson_s = pjson.to_s.gsub(/:x/,'x').gsub(/:y/,'y').gsub(/=>/,':')
=debug myrows
=debug pjson
=debug pjson_s
  

:css
  #tr2td1 {background-color: #CCCCCC; min-width: 800px;}
  #chart_container {
          margin-top: 21px;
          position: relative;
          font-family: Arial, Helvetica, sans-serif;
  }
  #chart {
          position: relative;
          left: 40px;
          background-color: white;
          width: 600px;
  }
  #chart_y_axis {
          position: absolute;
          top: 0;
          bottom: 0;
          width: 40px;
  }

#chart_container
  #chart_y_axis
  #chart

:javascript
  var p_json        = #{pjson_s} ;
  var longonly_json = #{longjson_s} ;
  var graph = new Rickshaw.Graph( {
    element: document.querySelector("#chart"),
    min: #{miny},
    max: #{maxy},
    renderer: 'line',
    interpolation: 'linear',
    width: 600,
    height: 400,
    series: [{color: 'blue',data: longonly_json},{color: 'green',data: p_json}]
  });
  var x_axis = new Rickshaw.Graph.Axis.Time( { graph: graph } );
  var chart_y_axis = new Rickshaw.Graph.Axis.Y( {
    graph: graph,
    orientation: 'left',
    element: document.getElementById('chart_y_axis'),
  } );
  graph.render();


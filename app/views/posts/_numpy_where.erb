I have a Python Pandas DataFrame which looks like this:
<pre>
<code class='python'>(Pdb) csv1[['ydates','cp']].tail()
           ydates       cp
10095  2014-12-24  2081.88
10096  2014-12-26  2088.77
10097  2014-12-29  2090.57
10098  2014-12-30  2080.35
10099  2014-12-31  2058.90
</code>
</pre>

I turned it into a NumPy Array:

<pre>
<code class='python'>(Pdb) np1 = csv1[['ydates','cp']].tail().values
(Pdb) 
(Pdb) np1
array([['2014-12-24', 2081.88],
       ['2014-12-26', 2088.77],
       ['2014-12-29', 2090.57],
       ['2014-12-30', 2080.35],
       ['2014-12-31', 2058.9]], dtype=object)
(Pdb) 
</code>
</pre>
If these rows were in Sqlite I could do this SELECT:

<pre>
<code class='sql'>SELECT ydates,cp FROM csv1 WHERE ydates > '2014-12-24';
</code>
</pre>

Then, Sqlite would return the last 4 rows.
<br/>
<br/>
How do I return the last 4 rows using NumPy?
<br/>
<br/>

When I use NumPy for this type of task,
I first focus my mind on what I call the 'predicate'.
<br/>
<br/>

In this example the predicate is this:

<pre>
<code class='sql'>ydates > '2014-12-24';
</code>
</pre>

A proper predicate returns a Boolean.
<br/>
<br/>

The above predicate works well in SQL.
<br/>
<br/>

How do I write it in NumPy?
<br/>
<br/>

Answer: 

<pre>
<code class='python'>np1[:,0] > '2014-12-24'
</code>
</pre>

The above expression returns an Array of Booleans:
<pre>
<code class='python'>(Pdb) nppred = np1[:,0] > '2014-12-24'
(Pdb) nppred
array([False,  True,  True,  True,  True], dtype=bool)
</code>
</pre>
When I look at the above Array, I visualize it as a column rotated clockwise.
<br/>
<br/>
Also, note that the colon is a NumPy expression which represents all rows.
<br/>
<br/>
And, note that the zero is a NumPy expression which represents the 0th column which in this case is a column full of dates.
<br/>
<br/>
When working with NumPy I quickly memorized that row-expressions belong on the left of the comma and column-expressions belong on the right.
<br/>
<br/>
If you work with R it will seem familiar.
<br/>
<br/>
If you work with Pandas a lot, it may add cognitive load to your thoughts.
<br/>
<br/>
Now that I have my predicate, and from that I have my column full of Booleans,
I can apply it to my NumPy Array:

<pre>
<code class='python'>(Pdb) np1[nppred,:]
array([['2014-12-26', 2088.77],
       ['2014-12-29', 2090.57],
       ['2014-12-30', 2080.35],
       ['2014-12-31', 2058.9]], dtype=object)
</code>
</pre>
I just demonstrated a common idea in Pandas, NumPy, and R.
That is, to apply a column full of Booleans to data shaped like a table.
<br/>
<br/>

If I match a True to a row in the table, I get that row.
<br/>
<br/>

If I match a False to a row in the table, I get nothing.
<br/>
<br/>

The way I do this in NumPy is to place the Booleans on the left hand side of the comma which is also left of the column-expression (in this example the column-expression is just a single colon which represents 'all-columns' which is easy to type but sometimes easy to miss).
<br/>
<br/>
In Pandas I place the Booleans on the right hand side of the columns.
<br/>
<br/>

In SQL, like Pandas, predicates also go on the right hand side of the columns.
<br/>
<br/>
Remember: In NumPy we place the Booleans LEFT of the columns.
<br/>
<br/>

Let the syntax do the talking:

<pre>
<code class='python'>(Pdb) nppred
array([False,  True,  True,  True,  True], dtype=bool)

(Pdb) np1[nppred,:]
array([['2014-12-26', 2088.77],
       ['2014-12-29', 2090.57],
       ['2014-12-30', 2080.35],
       ['2014-12-31', 2058.9]], dtype=object)
</code>
</pre>

Here is another demo.
<br />
How do I apply this predicate?
<pre>
<code class='sql'>WHERE ydates == '2014-12-24'
</code>
</pre>

Answer:

<pre>
<code class='python'>(Pdb) nppred2 = np1[:,0] == '2014-12-24'
(Pdb) 
(Pdb) np1[nppred2,:]
array([['2014-12-24', 2081.88]], dtype=object)
(Pdb) 
</code>
</pre>

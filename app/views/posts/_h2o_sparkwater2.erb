<code class='bash'>

// I found some syntax here:

// /tmp/swg/examples/scripts/dlDemo.script

// Maybe the syntax below should be moused into sparkling shell?

// import water.{H2O,H2OClientApp}
// H2OClientApp.start()
// H2O.waitForCloudSize(3, 10000)

import java.io.File
import org.apache.spark.examples.h2o._
import org.apache.spark.h2o._

// val dataFile = "../h2o-examples/smalldata/allyears2k_headers.csv.gz"
val dataFile = "/tmp/swg/examples/smalldata/allyears2k_headers.csv.gz"
val airlinesData = new DataFrame(new File(dataFile))

// Above line gives exception:
// 
// scala> val dataFile = "/tmp/swg/examples/smalldata/allyears2k_headers.csv.gz"
// dataFile: String = /tmp/swg/examples/smalldata/allyears2k_headers.csv.gz
// 
// scala> val airlinesData = new DataFrame(new File(dataFile))
// java.lang.ArrayIndexOutOfBoundsException: 65535


val h2oContext = new H2OContext(sc)
import h2oContext._

val airlinesTable : RDD[Airlines] = toRDD[Airlines](airlinesData)
airlinesTable.count

val flightsOnlyToSFO = airlinesTable.filter( f => f.Dest == Some("SFO") || f.Dest==Some("SJC") || f.Dest==Some("OAK") )
flightsOnlyToSFO.count

import org.apache.spark.sql.SQLContext
val sqlContext = new SQLContext(sc)
import sqlContext._ // import implicit conversions
airlinesTable.registerTempTable("airlinesTable")
val query = "SELECT * FROM airlinesTable WHERE Dest LIKE 'SFO' OR Dest LIKE 'SJC' OR Dest LIKE 'OAK' "
val result = sql(query) // Using a registered context and tables
result.count

result.count == flightsOnlyToSFO.count

import hex.deeplearning._
import hex.deeplearning.DeepLearningModel.DeepLearningParameters
val dlParams = new DeepLearningParameters()

dlParams._training_frame = result( 'Year, 'Month, 'DayofMonth, 'DayOfWeek, 'CRSDepTime, 'CRSArrTime,'UniqueCarrier, 'FlightNum, 'TailNum, 'CRSElapsedTime, 'Origin, 'Dest,'Distance, 'IsDepDelayed)
dlParams.response_column = 'IsDepDelayed.name
val dl = new DeepLearning(dlParams)
val dlModel = dl.train.get

val predictionH2OFrame = dlModel.score(result)('predict)
val predictionsFromModel = toRDD[DoubleHolder](predictionH2OFrame).map ( _.result.getOrElse("NaN") ).collect

 
</code>
